     1                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
     2                                  ;   TTTTTTTTTTTTTTT               A               PPPPPP         Titan Assembly Project, CSUF
     3                                  ;          T                     A A              P    PP        Titan Assembly Project, CSUF
     4                                  ;          T                    A   A             P     PP       Titan Assembly Project, CSUF
     5                                  ;          T                   A     A            P      PP      Titan Assembly Project, CSUF
     6                                  ;          T                  A       A           P     PP       Titan Assembly Project, CSUF
     7                                  ;          T                 A         A          P    PP        Titan Assembly Project, CSUF
     8                                  ;          T                AAAAAAAAAAAAA         PPPPPP         Titan Assembly Project, CSUF
     9                                  ;          T               A             A        P              Titan Assembly Project, CSUF
    10                                  ;          T              A               A       P              Titan Assembly Project, CSUF
    11                                  ;          T             A                 A      P              Titan Assembly Project, CSUF
    12                                  ;          T            A                   A     P              Titan Assembly Project, CSUF
    13                                  ;
    14                                  ;Author information
    15                                  ;  Author name: Floyd Holliday
    16                                  ;  Author email: holliday@fullerton.edu
    17                                  ;Course information
    18                                  ;  Course number: CPSC240
    19                                  ;  Assignment number: 00
    20                                  ;  Due date: 9999-Dec-31
    21                                  ;  Date of last modification: 2014-Jul-09
    22                                  ;Project information
    23                                  ;  Project title: X86 Assembly Debugger
    24                                  ;  Purpose: Show contents of registers, stack, and arrays.  This is a tool used by assembly programmers during the development phase.
    25                                  ;  Status: In continuous maintenance
    26                                  ;  Project files: debug.inc, debug.asm
    27                                  ;  Modules (subprograms): showregisters, dumpstack, showfpusubprogram, showxmmregisters, showymmregisters
    28                                  ;  Those five subprograms are contained within this debug.asm file.
    29                                  ;Translator information
    30                                  ;  Linux: nasm -f elf64 -l debug.lis -o debug.o debug.asm
    31                                  ;References and credits
    32                                  ;  Dr. Paul Carter: www.drpaulcarter.com
    33                                  ;Format information
    34                                  ;  Page width: 172 columns
    35                                  ;  Begin comments: 61
    36                                  ;  Optimal print specification: Landscape orientation, 7 points, monospace, 8Â½x11 paper
    37                                  ;Restrictions
    38                                  ;  This software is for use by persons enrolled in CPSC240.  All other use is unauthorized.
    39                                  ;Information for users  
    40                                  ;  Make this Debug tool available for your own software.  First assemble this file.  Place the include statement |%include "debug.inc"| excluding the vertical bars in your
    41                                  ;  source code at the beginning.  Typically this include directive is the first statement other than comments in a program.
    42                                  ;Future enhancements pending
    43                                  ;  Add the save and restore feature to modules showregistersubprogram, showfpusubprogram, showxmmsubprogram
    44                                  ;  Localize all identifiers to their own subprogram in order that no identifier conflict with another identifier in this file.
    45                                  
    46                                  ;==========================================================================================================================================================================
    47                                  ;===== General facts used in Debug ========================================================================================================================================
    48                                  ;==========================================================================================================================================================================
    49                                  ;CCC-64 sequence of parameters (left to right):
    50                                  ;  1st  rdi
    51                                  ;  2nd  rsi
    52                                  ;  3nd  rdx
    53                                  ;  4rd  rcx
    54                                  ;  5th  r8
    55                                  ;  6th  r9
    56                                  ;  remainder on stack right to left
    57                                  
    58                                  ;Regarding which format specifier to use: the following appear to hold:
    59                                  ; "%x" designates 32-bit hex output with leading zeros suppressed.
    60                                  ; "%lx" designates 64-bit hex output
    61                                  ; "%llx" designates 128-bit hex output
    62                                  ; "%lllx" designates 256-bit hex output
    63                                  ; "%llld" designates 256-bit decimal output
    64                                  ; "%8x" designates 32-bit hex output in 8 columns
    65                                  ; "%016lx" designates 64-bit hex output in 16 columns with leading zeros displayed.
    66                                  ; "%lu" designates 64-bit unsigned integer.
    67                                  
    68                                  ;==========================================================================================================================================================================
    69                                  ;===== Begin subprogram showregisters =====================================================================================================================================
    70                                  ;===== Begin subprogram showregisters =====================================================================================================================================
    71                                  ;===== Begin subprogram showregisters =====================================================================================================================================
    72                                  ;==========================================================================================================================================================================
    73                                  ;Module information
    74                                  ;  This module's call name: showregisterssubprogram
    75                                  ;  Language: X86-64
    76                                  ;  Syntax: Intel
    77                                  ;  Date last modified: 2014-July-14
    78                                  ;  Purpose: This module will show the contents of all integer registers including the flags register.
    79                                  ;  Status: The present source code is in production.
    80                                  ;  Future enhancements: Backup the SSE registers.  Find how to detect the presence of AVE and backup AVE only when present.
    81                                  
    82                                  ;X86 rflags register:
    83                                  ;Bit# Mnemonic Name
    84                                  ;  0     CF    Carry flag
    85                                  ;  1           unused
    86                                  ;  2     PF    Parity flag
    87                                  ;  3           unused
    88                                  ;  4     AF    Auxiliary Carry flag
    89                                  ;  5           unused
    90                                  ;  6     ZF    Zero flag
    91                                  ;  7     SF    Sign flag
    92                                  ;  8     TF    Trap flag
    93                                  ;  9     IF    Interrupt flag
    94                                  ; 10     DF    Direction flag
    95                                  ; 11     OF    Overflow flag
    96                                  
    97                                  ;===== Expected format of the output ======================================================================================================================================
    98                                  ;Register Dump # 132
    99                                  ;rax = 0000000000000003 rbx = 0000000000000000 rcx = 0000000000000001 rdx = 00007f59b444aab0
   100                                  ;rsi = 0000000000000003 rdi = 0000000000602ad0 rbp = 00007fff7d9a6960 rsp = 00007fff7d9a6900
   101                                  ;r8  = 00007f59b496e01b r9  = 0000000000000001 r10 = 0000000000000000 r11 = 0000000000000246
   102                                  ;r12 = 0000000000000003 r13 = 00007fff7d9a6a40 r14 = 0000000000000019 r15 = 0000000000000000
   103                                  ;rip = 00000000004008bf
   104                                  ;rflags = 0000000000000246 of = 0 sf = 0 zf = 1 af = 0 pf = 1 cf = 0
   105                                  
   106                                  
   107                                  ;===== Define constants ===================================================================================================================================================
   108                                  ;Set constants via assembler directives
   109                                  %define qwordsize 8                     ;8 bytes
   110                                  %define cmask 00000001h                 ;Carry mask
   111                                  %define pmask 00000004h                 ;Parity mask
   112                                  %define amask 00000010h                 ;Auxiliary mask
   113                                  %define zmask 00000040h                 ;Zero mask
   114                                  %define smask 00000080h                 ;Sign mask
   115                                  %define dmask 00000400h                 ;Not used
   116                                  %define omask 00000800h                 ;Overflow mask
   117                                  
   118                                  
   119                                  extern printf                                               ;printf will be available to the linker in a binary format
   120                                  
   121                                  global showregisterssubprogram                              ;Make this subprogram callable from outside this file
   122                                  
   123                                  segment .data                                               ;This segment declares initialized data
   124                                  
   125 00000000 526567697374657220-     showregisterssubprogram.registerformat1 db "Register Dump # %ld", 10,
   125 00000009 44756D70202320256C-
   125 00000012 640A               
   126 00000014 726178203D20253031-                                             db "rax = %016lx rbx = %016lx rcx = %016lx rdx = %016lx", 10,
   126 0000001D 366C7820726278203D-
   126 00000026 20253031366C782072-
   126 0000002F 6378203D2025303136-
   126 00000038 6C7820726478203D20-
   126 00000041 253031366C780A     
   127 00000048 727369203D20253031-                                             db "rsi = %016lx rdi = %016lx rbp = %016lx rsp = %016lx", 10, 0
   127 00000051 366C7820726469203D-
   127 0000005A 20253031366C782072-
   127 00000063 6270203D2025303136-
   127 0000006C 6C7820727370203D20-
   127 00000075 253031366C780A00   
   128                                  
   129 0000007D 723820203D20253031-     showregisterssubprogram.registerformat2 db "r8  = %016lx r9  = %016lx r10 = %016lx r11 = %016lx", 10,
   129 00000086 366C7820723920203D-
   129 0000008F 20253031366C782072-
   129 00000098 3130203D2025303136-
   129 000000A1 6C7820723131203D20-
   129 000000AA 253031366C780A     
   130 000000B1 723132203D20253031-                                             db "r12 = %016lx r13 = %016lx r14 = %016lx r15 = %016lx", 10, 0
   130 000000BA 366C7820723133203D-
   130 000000C3 20253031366C782072-
   130 000000CC 3134203D2025303136-
   130 000000D5 6C7820723135203D20-
   130 000000DE 253031366C780A00   
   131                                  
   132 000000E6 726970203D20253031-     showregisterssubprogram.registerformat3 db "rip = %016lx", 10, "rflags = %016lx ",
   132 000000EF 366C780A72666C6167-
   132 000000F8 73203D20253031366C-
   132 00000101 7820               
   133 00000103 6F66203D2025317820-                                             db "of = %1x sf = %1x zf = %1x af = %1x pf = %1x cf = %1x", 10, 0
   133 0000010C 7366203D2025317820-
   133 00000115 7A66203D2025317820-
   133 0000011E 6166203D2025317820-
   133 00000127 7066203D2025317820-
   133 00000130 6366203D202531780A-
   133 00000139 00                 
   134                                  
   135 0000013A 257300                  showregisterssubprogram.stringformat db "%s", 0
   136                                  
   137 0000013D 546865207873617665-     showregisterssubprogram.notsupportedmessage db "The xsave instruction is not supported in this microprocessor.", 10, 0
   137 00000146 20696E737472756374-
   137 0000014F 696F6E206973206E6F-
   137 00000158 7420737570706F7274-
   137 00000161 656420696E20746869-
   137 0000016A 73206D6963726F7072-
   137 00000173 6F636573736F722E0A-
   137 0000017C 00                 
   138                                  
   139                                  segment .bss                                                ;Declare uninitialized arrays in this segment
   140                                  
   141                                  align 64                                                    ;The next data object must begin on a 64-byte boundary.
   142 00000000 <res 00000340>          showregisterssubprogram.backuparea resb 832                 ;Declare an array of sufficient size to hold all data from state components 0, 1, and 2.
   143                                  
   144                                  segment .text                                               ;Executable instruction are in this segment
   145                                  
   146                                  showregisterssubprogram:                                    ;Execution begins here
   147                                  
   148                                  ;=========== Back up all the GPRs whether used in this program or not =====================================================================================================
   149                                  
   150 00000000 55                      push       rbp                                              ;Save a copy of the stack base pointer
   151 00000001 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
   152 00000004 50                      push       rax                                              ;This is a special case: typically rax is not backed up.
   153 00000005 53                      push       rbx                                              ;Back up rbx
   154 00000006 51                      push       rcx                                              ;Back up rcx
   155 00000007 52                      push       rdx                                              ;Back up rdx
   156 00000008 56                      push       rsi                                              ;Back up rsi
   157 00000009 57                      push       rdi                                              ;Back up rdi
   158 0000000A 4150                    push       r8                                               ;Back up r8
   159 0000000C 4151                    push       r9                                               ;Back up r9
   160 0000000E 4152                    push       r10                                              ;Back up r10
   161 00000010 4153                    push       r11                                              ;Back up r11
   162 00000012 4154                    push       r12                                              ;Back up r12
   163 00000014 4155                    push       r13                                              ;Back up r13
   164 00000016 4156                    push       r14                                              ;Back up r14
   165 00000018 4157                    push       r15                                              ;Back up r15
   166 0000001A 9C                      pushf                                                       ;Back up rflags
   167                                  
   168                                  
   169                                  ;==========================================================================================================================================================================
   170                                  ;===== Begin State Component Backup =======================================================================================================================================
   171                                  ;==========================================================================================================================================================================
   172                                  
   173                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor ========================================================================================
   174                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
   175                                  ;Preconditions: rax holds 1.
   176 0000001B B801000000              mov        rax, 1
   177                                  
   178                                  ;Execute the cpuid instruction
   179 00000020 0FA2                    cpuid
   180                                  
   181                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
   182                                  
   183                                  ;=========== Extract bit #26 and test it ==================================================================================================================================
   184                                  
   185 00000022 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
   186                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
   187 00000029 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
   188 0000002D 742A                    je         .xsavenotsupported                               ;Skip the section that backs up state component data.
   189                                  
   190                                  ;========== Call the function to obtain the bitmap of state components ====================================================================================================
   191                                  
   192                                  ;Preconditions
   193 0000002F B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   194 00000034 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   195                                  
   196                                  ;Call the function
   197 00000039 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
   198                                  
   199                                  ;Postconditions (There are 2 of these):
   200                                  
   201                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
   202                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
   203                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
   204                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
   205                                  ;Therefore, the value in ecx will be less than or equal to 832.
   206                                  
   207                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
   208                                  ;allow only 3 state components maximum.
   209                                  
   210 0000003B 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
   211 00000041 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
   212 00000044 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
   213 0000004A 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
   214                                  
   215                                  ;========== Save all the data of all three components except GPRs =========================================================================================================
   216                                  
   217                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
   218                                  
   219                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
   220 0000004D 0FAE2425[00000000]      xsave      [.backuparea]                                    ;All the data of state components managed by xsave have been written to backuparea.
   221                                  
   222 00000055 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
   223 00000057 EB20                    jmp        .startapplication                                ;Jump past the message stating "The xsav instruction is not supported"
   224                                  
   225                                  ;========== Show message xsave is not supported on this platform ==========================================================================================================
   226                                  .xsavenotsupported:
   227                                  
   228 00000059 B800000000              mov        rax, 0                                           ;The zero value indicates that no floating values will be outputted by printf.
   229 0000005E 48BF-                   mov        rdi, .stringformat                               ;"%s"
   229 00000060 [3A01000000000000] 
   230 00000068 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not supported in this microprocessor.
   230 0000006A [3D01000000000000] 
   231 00000072 E8(00000000)            call       printf
   232                                  
   233 00000077 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
   234                                  
   235                                  ;==========================================================================================================================================================================
   236                                  ;===== End of State Component Backup ======================================================================================================================================
   237                                  ;==========================================================================================================================================================================
   238                                  
   239                                  ;==========================================================================================================================================================================
   240                                  .startapplication: ;===== Begin the application here: Show the General Purpose Registers ==================================================================================
   241                                  ;==========================================================================================================================================================================
   242                                  
   243                                  ;===== State of the integer stack at this time ============================================================================================================================
   244                                  
   245                                  ;              |---------------------------|
   246                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   247                                  ;              |---------------------------|
   248                                  ;     rsp+18*8 | arbitrary number from user|
   249                                  ;              |---------------------------|
   250                                  ;     rsp+17*8 | return address            |
   251                                  ;              |---------------------------|
   252                                  ;     rsp+16*8 | rbp                       |
   253                                  ;              |---------------------------|
   254                                  ;     rsp+15*8 | rax                       |
   255                                  ;              |---------------------------|
   256                                  ;     rsp+14*8 | rbx                       |
   257                                  ;              |---------------------------|
   258                                  ;     rsp+13*8 | rcx                       |
   259                                  ;              |---------------------------|
   260                                  ;     rsp+12*8 | rdx                       |
   261                                  ;              |---------------------------|
   262                                  ;     rsp+11*8 | rsi                       |
   263                                  ;              |---------------------------|
   264                                  ;     rsp+10*8 | rdi                       |
   265                                  ;              |---------------------------|
   266                                  ;     rsp+9*8  | r8                        |
   267                                  ;              |---------------------------|
   268                                  ;     rsp+8*8  | r9                        |
   269                                  ;              |---------------------------|
   270                                  ;     rsp+7*8  | r10                       |
   271                                  ;              |---------------------------|
   272                                  ;     rsp+6*8  | r11                       |
   273                                  ;              |---------------------------|
   274                                  ;     rsp+5*8  | r12                       |
   275                                  ;              |---------------------------|
   276                                  ;     rsp+4*8  | r13                       |
   277                                  ;              |---------------------------|
   278                                  ;     rsp+3*8  | r14                       |
   279                                  ;              |---------------------------|
   280                                  ;     rsp+2*8  | r15                       |
   281                                  ;              |---------------------------|
   282                                  ;     rsp+1*8  | rflags                    |
   283                                  ;              |---------------------------|
   284                                  ;     rsp      | flag either -1 or 0       |
   285                                  ;              |---------------------------|
   286                                  ;
   287 00000079 4889E0                  mov        rax, rsp                                         ;Copy top of stack to an available registers where it can be modified without damage to the true top of stack.
   288 0000007C 480598000000            add        rax, 152                                         ;152=19*8.  rax holds address of top of stack at the instant before this program showregisters was called.
   289 00000082 50                      push       rax                                              ;The top of stack holds the top of the stack address when showregisters was called.
   290                                  
   291                                  ;===== State of the integer stack at this time ============================================================================================================================
   292                                  
   293                                  ;              |---------------------------|
   294                                  ;     rsp+20*8 | unknown                   |
   295                                  ;              |---------------------------|
   296                                  ;     rsp+19*8 | arbitrary number from user|
   297                                  ;              |---------------------------|
   298                                  ;     rsp+18*8 | return address            |
   299                                  ;              |---------------------------|
   300                                  ;     rsp+17*8 | rbp                       |
   301                                  ;              |---------------------------|
   302                                  ;     rsp+16*8 | rax                       |
   303                                  ;              |---------------------------|
   304                                  ;     rsp+15*8 | rbx                       |
   305                                  ;              |---------------------------|
   306                                  ;     rsp+14*8 | rcx                       |
   307                                  ;              |---------------------------|
   308                                  ;     rsp+13*8 | rdx                       |
   309                                  ;              |---------------------------|
   310                                  ;     rsp+12*8 | rsi                       |
   311                                  ;              |---------------------------|
   312                                  ;     rsp+11*8 | rdi                       |
   313                                  ;              |---------------------------|
   314                                  ;     rsp+10*8 | r8                        |
   315                                  ;              |---------------------------|
   316                                  ;     rsp+9*8  | r9                        |
   317                                  ;              |---------------------------|
   318                                  ;     rsp+8*8  | r10                       |
   319                                  ;              |---------------------------|
   320                                  ;     rsp+7*8  | r11                       |
   321                                  ;              |---------------------------|
   322                                  ;     rsp+6*8  | r12                       |
   323                                  ;              |---------------------------|
   324                                  ;     rsp+5*8  | r13                       |
   325                                  ;              |---------------------------|
   326                                  ;     rsp+4*8  | r14                       |
   327                                  ;              |---------------------------|
   328                                  ;     rsp+3*8  | r15                       |
   329                                  ;              |---------------------------|
   330                                  ;     rsp+2*8  | rflags                    |
   331                                  ;              |---------------------------|
   332                                  ;     rsp+1*8  | flag either -1 or 0       |
   333                                  ;              |---------------------------|
   334                                  ;     rsp      | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   335                                  ;              |---------------------------|
   336                                  
   337 00000083 488B842488000000        mov        rax, [rsp+17*8]                                  ;Copy the original rbp to an available register.
   338 0000008B 50                      push       rax                                              ;Push the original rbp onto the stack.
   339                                  
   340                                  ;===== State of the integer stack at this time ============================================================================================================================
   341                                  
   342                                  ;              |---------------------------|
   343                                  ;     rsp+21*8 | unknown                   |
   344                                  ;              |---------------------------|
   345                                  ;     rsp+20*8 | arbitrary number from user|
   346                                  ;              |---------------------------|
   347                                  ;     rsp+19*8 | return address            |
   348                                  ;              |---------------------------|
   349                                  ;     rsp+18*8 | rbp                       |
   350                                  ;              |---------------------------|
   351                                  ;     rsp+17*8 | rax                       |
   352                                  ;              |---------------------------|
   353                                  ;     rsp+16*8 | rbx                       |
   354                                  ;              |---------------------------|
   355                                  ;     rsp+15*8 | rcx                       |
   356                                  ;              |---------------------------|
   357                                  ;     rsp+14*8 | rdx                       |
   358                                  ;              |---------------------------|
   359                                  ;     rsp+13*8 | rsi                       |
   360                                  ;              |---------------------------|
   361                                  ;     rsp+12*8 | rdi                       |
   362                                  ;              |---------------------------|
   363                                  ;     rsp+11*8 | r8                        |
   364                                  ;              |---------------------------|
   365                                  ;     rsp+10*8 | r9                        |
   366                                  ;              |---------------------------|
   367                                  ;     rsp+9*8  | r10                       |
   368                                  ;              |---------------------------|
   369                                  ;     rsp+8*8  | r11                       |
   370                                  ;              |---------------------------|
   371                                  ;     rsp+7*8  | r12                       |
   372                                  ;              |---------------------------|
   373                                  ;     rsp+6*8  | r13                       |
   374                                  ;              |---------------------------|
   375                                  ;     rsp+5*8  | r14                       |
   376                                  ;              |---------------------------|
   377                                  ;     rsp+4*8  | r15                       |
   378                                  ;              |---------------------------|
   379                                  ;     rsp+3*8  | rflags                    |
   380                                  ;              |---------------------------|
   381                                  ;     rsp+2*8  | flag either -1 or 0       |
   382                                  ;              |---------------------------|
   383                                  ;     rsp+1*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   384                                  ;              |---------------------------|
   385                                  ;     rsp      | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   386                                  ;              |---------------------------|
   387                                  
   388 0000008C 488B442460              mov        rax, [rsp+12*8]                                  ;Copy the original rdi to an available register.
   389 00000091 50                      push       rax                                              ;Push the original rdi onto the stack.
   390                                  
   391                                  ;===== State of the integer stack at this time ============================================================================================================================
   392                                  
   393                                  ;              |---------------------------|
   394                                  ;     rsp+22*8 | unknown                   |
   395                                  ;              |---------------------------|
   396                                  ;     rsp+21*8 | arbitrary number from user|
   397                                  ;              |---------------------------|
   398                                  ;     rsp+20*8 | return address            |
   399                                  ;              |---------------------------|
   400                                  ;     rsp+19*8 | rbp                       |
   401                                  ;              |---------------------------|
   402                                  ;     rsp+18*8 | rax                       |
   403                                  ;              |---------------------------|
   404                                  ;     rsp+17*8 | rbx                       |
   405                                  ;              |---------------------------|
   406                                  ;     rsp+16*8 | rcx                       |
   407                                  ;              |---------------------------|
   408                                  ;     rsp+15*8 | rdx                       |
   409                                  ;              |---------------------------|
   410                                  ;     rsp+14*8 | rsi                       |
   411                                  ;              |---------------------------|
   412                                  ;     rsp+13*8 | rdi                       |
   413                                  ;              |---------------------------|
   414                                  ;     rsp+12*8 | r8                        |
   415                                  ;              |---------------------------|
   416                                  ;     rsp+11*8 | r9                        |
   417                                  ;              |---------------------------|
   418                                  ;     rsp+10*8 | r10                       |
   419                                  ;              |---------------------------|
   420                                  ;     rsp+9*8  | r11                       |
   421                                  ;              |---------------------------|
   422                                  ;     rsp+8*8  | r12                       |
   423                                  ;              |---------------------------|
   424                                  ;     rsp+7*8  | r13                       |
   425                                  ;              |---------------------------|
   426                                  ;     rsp+6*8  | r14                       |
   427                                  ;              |---------------------------|
   428                                  ;     rsp+5*8  | r15                       |
   429                                  ;              |---------------------------|
   430                                  ;     rsp+4*8  | rflags                    |
   431                                  ;              |---------------------------|
   432                                  ;     rsp+3*8  | flag either -1 or 0       |
   433                                  ;              |---------------------------|
   434                                  ;     rsp+2*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   435                                  ;              |---------------------------|
   436                                  ;     rsp+1*8  | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   437                                  ;              |---------------------------|
   438                                  ;     rsp      | original rdi              |                ;"original rdi" means the value in rdi when showregisters was called.
   439                                  ;              |---------------------------|
   440                                  
   441 00000092 488B442470              mov        rax, [rsp+14*8]                                  ;Copy the original rsi to an available register.
   442 00000097 50                      push       rax                                              ;Push the original rsi onto the stack.
   443                                  
   444                                  ;===== State of the integer stack at this time ============================================================================================================================
   445                                  
   446                                  ;              |---------------------------|
   447                                  ;     rsp+23*8 | unknown                   |
   448                                  ;              |---------------------------|
   449                                  ;     rsp+22*8 | arbitrary number from user|
   450                                  ;              |---------------------------|
   451                                  ;     rsp+21*8 | return address            |
   452                                  ;              |---------------------------|
   453                                  ;     rsp+20*8 | rbp                       |
   454                                  ;              |---------------------------|
   455                                  ;     rsp+19*8 | rax                       |
   456                                  ;              |---------------------------|
   457                                  ;     rsp+18*8 | rbx                       |
   458                                  ;              |---------------------------|
   459                                  ;     rsp+17*8 | rcx                       |
   460                                  ;              |---------------------------|
   461                                  ;     rsp+16*8 | rdx                       |
   462                                  ;              |---------------------------|
   463                                  ;     rsp+15*8 | rsi                       |
   464                                  ;              |---------------------------|
   465                                  ;     rsp+14*8 | rdi                       |
   466                                  ;              |---------------------------|
   467                                  ;     rsp+13*8 | r8                        |
   468                                  ;              |---------------------------|
   469                                  ;     rsp+12*8 | r9                        |
   470                                  ;              |---------------------------|
   471                                  ;     rsp+11*8 | r10                       |
   472                                  ;              |---------------------------|
   473                                  ;     rsp+10*8 | r11                       |
   474                                  ;              |---------------------------|
   475                                  ;     rsp+9*8  | r12                       |
   476                                  ;              |---------------------------|
   477                                  ;     rsp+8*8  | r13                       |
   478                                  ;              |---------------------------|
   479                                  ;     rsp+7*8  | r14                       |
   480                                  ;              |---------------------------|
   481                                  ;     rsp+6*8  | r15                       |
   482                                  ;              |---------------------------|
   483                                  ;     rsp+5*8  | rflags                    |
   484                                  ;              |---------------------------|
   485                                  ;     rsp+4*8  | flag either -1 or 0       |
   486                                  ;              |---------------------------|
   487                                  ;     rsp+3*8  | original rsp              |                ;"original rsp" means the value in rsp when showregisters was called.
   488                                  ;              |---------------------------|
   489                                  ;     rsp+2*8  | original rbp              |                ;"original rbp" means the value in rbp when showregisters was called.
   490                                  ;              |---------------------------|
   491                                  ;     rsp+1*8  | original rdi              |                ;"original rdi" means the value in rdi when showregisters was called.
   492                                  ;              |---------------------------|
   493                                  ;     rsp      | original rsi              |                ;"original rsi" means the value in rsi when showregisters was called.
   494                                  ;              |---------------------------|
   495                                  
   496 00000098 4C8B8C2480000000        mov        r9, [rsp+16*8]                                   ;Copy the original rdx to r9, which is the 6th CCC parameter
   497 000000A0 4C8B842488000000        mov        r8, [rsp+17*8]                                   ;Copy the original rcx to r8, which is the 5th CCC parameter
   498 000000A8 488B8C2490000000        mov        rcx, [rsp+18*8]                                  ;Copy the original rbx to rcx, which is the 4th CCC parameter
   499 000000B0 488B942498000000        mov        rdx, [rsp+19*8]
   500 000000B8 488BB424B0000000        mov        rsi, [rsp+22*8]
   501 000000C0 48BF-                   mov        rdi, .registerformat1
   501 000000C2 [0000000000000000] 
   502 000000CA B800000000              mov        rax, 0                                           ;The value in rax signals to printf the number of floating point values to be outputted.
   503 000000CF E8(00000000)            call       printf
   504                                  
   505 000000D4 58                      pop        rax                                              ;Remove and discard original rsi from the stack
   506 000000D5 58                      pop        rax                                              ;Remove and discard original rdi from the stack
   507 000000D6 58                      pop        rax                                              ;Remove and discard original rbp from the stack
   508 000000D7 58                      pop        rax                                              ;Remove and discard original rsp from the stack
   509                                  
   510                                  ;===== State of the integer stack at this time ============================================================================================================================
   511                                  
   512                                  ;              |---------------------------|
   513                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   514                                  ;              |---------------------------|
   515                                  ;     rsp+18*8 | arbitrary number from user|
   516                                  ;              |---------------------------|
   517                                  ;     rsp+17*8 | return address            |
   518                                  ;              |---------------------------|
   519                                  ;     rsp+16*8 | rbp                       |
   520                                  ;              |---------------------------|
   521                                  ;     rsp+15*8 | rax                       |
   522                                  ;              |---------------------------|
   523                                  ;     rsp+14*8 | rbx                       |
   524                                  ;              |---------------------------|
   525                                  ;     rsp+13*8 | rcx                       |
   526                                  ;              |---------------------------|
   527                                  ;     rsp+12*8 | rdx                       |
   528                                  ;              |---------------------------|
   529                                  ;     rsp+11*8 | rsi                       |
   530                                  ;              |---------------------------|
   531                                  ;     rsp+10*8 | rdi                       |
   532                                  ;              |---------------------------|
   533                                  ;     rsp+9*8  | r8                        |
   534                                  ;              |---------------------------|
   535                                  ;     rsp+8*8  | r9                        |
   536                                  ;              |---------------------------|
   537                                  ;     rsp+7*8  | r10                       |
   538                                  ;              |---------------------------|
   539                                  ;     rsp+6*8  | r11                       |
   540                                  ;              |---------------------------|
   541                                  ;     rsp+5*8  | r12                       |
   542                                  ;              |---------------------------|
   543                                  ;     rsp+4*8  | r13                       |
   544                                  ;              |---------------------------|
   545                                  ;     rsp+3*8  | r14                       |
   546                                  ;              |---------------------------|
   547                                  ;     rsp+2*8  | r15                       |
   548                                  ;              |---------------------------|
   549                                  ;     rsp+1*8  | rflags                    |
   550                                  ;              |---------------------------|
   551                                  ;     rsp      | flag either -1 or 0       |
   552                                  ;              |---------------------------|
   553                                  
   554 000000D8 488B442410              mov        rax, [rsp+2*8]                                   ;Copy the original value of r15 to an available register.
   555 000000DD 50                      push       rax                                              ;Push the original value of r15 onto the stack.
   556                                  
   557                                  ;===== State of the integer stack at this time ============================================================================================================================
   558                                  
   559                                  ;              |---------------------------|
   560                                  ;     rsp+20*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   561                                  ;              |---------------------------|
   562                                  ;     rsp+19*8 | arbitrary number from user|
   563                                  ;              |---------------------------|
   564                                  ;     rsp+18*8 | return address            |
   565                                  ;              |---------------------------|
   566                                  ;     rsp+17*8 | rbp                       |
   567                                  ;              |---------------------------|
   568                                  ;     rsp+16*8 | rax                       |
   569                                  ;              |---------------------------|
   570                                  ;     rsp+15*8 | rbx                       |
   571                                  ;              |---------------------------|
   572                                  ;     rsp+14*8 | rcx                       |
   573                                  ;              |---------------------------|
   574                                  ;     rsp+13*8 | rdx                       |
   575                                  ;              |---------------------------|
   576                                  ;     rsp+12*8 | rsi                       |
   577                                  ;              |---------------------------|
   578                                  ;     rsp+11*8 | rdi                       |
   579                                  ;              |---------------------------|
   580                                  ;     rsp+10*8 | r8                        |
   581                                  ;              |---------------------------|
   582                                  ;     rsp+9*8  | r9                        |
   583                                  ;              |---------------------------|
   584                                  ;     rsp+8*8  | r10                       |
   585                                  ;              |---------------------------|
   586                                  ;     rsp+7*8  | r11                       |
   587                                  ;              |---------------------------|
   588                                  ;     rsp+6*8  | r12                       |
   589                                  ;              |---------------------------|
   590                                  ;     rsp+5*8  | r13                       |
   591                                  ;              |---------------------------|
   592                                  ;     rsp+4*8  | r14                       |
   593                                  ;              |---------------------------|
   594                                  ;     rsp+3*8  | r15                       |
   595                                  ;              |---------------------------|
   596                                  ;     rsp+2*8  | rflags                    |
   597                                  ;              |---------------------------|
   598                                  ;     rsp+1*8  | flag either -1 or 0       |
   599                                  ;              |---------------------------|
   600                                  ;     rsp      | original r15              |
   601                                  ;              |---------------------------|
   602                                  
   603 000000DE 488B442420              mov        rax, [rsp+4*8]                                   ;Copy the original value of r14 to an available register.
   604 000000E3 50                      push       rax                                              ;Push the original value of r14 onto the stack.
   605                                  
   606                                  ;===== State of the integer stack at this time ============================================================================================================================
   607                                  
   608                                  ;              |---------------------------|
   609                                  ;     rsp+21*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   610                                  ;              |---------------------------|
   611                                  ;     rsp+20*8 | arbitrary number from user|
   612                                  ;              |---------------------------|
   613                                  ;     rsp+19*8 | return address            |
   614                                  ;              |---------------------------|
   615                                  ;     rsp+18*8 | rbp                       |
   616                                  ;              |---------------------------|
   617                                  ;     rsp+17*8 | rax                       |
   618                                  ;              |---------------------------|
   619                                  ;     rsp+16*8 | rbx                       |
   620                                  ;              |---------------------------|
   621                                  ;     rsp+15*8 | rcx                       |
   622                                  ;              |---------------------------|
   623                                  ;     rsp+14*8 | rdx                       |
   624                                  ;              |---------------------------|
   625                                  ;     rsp+13*8 | rsi                       |
   626                                  ;              |---------------------------|
   627                                  ;     rsp+12*8 | rdi                       |
   628                                  ;              |---------------------------|
   629                                  ;     rsp+11*8 | r8                        |
   630                                  ;              |---------------------------|
   631                                  ;     rsp+10*8 | r9                        |
   632                                  ;              |---------------------------|
   633                                  ;     rsp+9*8  | r10                       |
   634                                  ;              |---------------------------|
   635                                  ;     rsp+8*8  | r11                       |
   636                                  ;              |---------------------------|
   637                                  ;     rsp+7*8  | r12                       |
   638                                  ;              |---------------------------|
   639                                  ;     rsp+6*8  | r13                       |
   640                                  ;              |---------------------------|
   641                                  ;     rsp+5*8  | r14                       |
   642                                  ;              |---------------------------|
   643                                  ;     rsp+4*8  | r15                       |
   644                                  ;              |---------------------------|
   645                                  ;     rsp+3*8  | rflags                    |
   646                                  ;              |---------------------------|
   647                                  ;     rsp+2*8  | flag either -1 or 0       |
   648                                  ;              |---------------------------|
   649                                  ;     rsp+1*8  | original r15              |
   650                                  ;              |---------------------------|
   651                                  ;     rsp      | original r14              |
   652                                  ;              |---------------------------|
   653                                  
   654 000000E4 488B442430              mov        rax, [rsp+6*8]
   655 000000E9 50                      push       rax
   656                                  
   657                                  ;===== State of the integer stack at this time ============================================================================================================================
   658                                  
   659                                  ;              |---------------------------|
   660                                  ;     rsp+22*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   661                                  ;              |---------------------------|
   662                                  ;     rsp+21*8 | arbitrary number from user|
   663                                  ;              |---------------------------|
   664                                  ;     rsp+20*8 | return address            |
   665                                  ;              |---------------------------|
   666                                  ;     rsp+19*8 | rbp                       |
   667                                  ;              |---------------------------|
   668                                  ;     rsp+18*8 | rax                       |
   669                                  ;              |---------------------------|
   670                                  ;     rsp+17*8 | rbx                       |
   671                                  ;              |---------------------------|
   672                                  ;     rsp+16*8 | rcx                       |
   673                                  ;              |---------------------------|
   674                                  ;     rsp+15*8 | rdx                       |
   675                                  ;              |---------------------------|
   676                                  ;     rsp+14*8 | rsi                       |
   677                                  ;              |---------------------------|
   678                                  ;     rsp+13*8 | rdi                       |
   679                                  ;              |---------------------------|
   680                                  ;     rsp+12*8 | r8                        |
   681                                  ;              |---------------------------|
   682                                  ;     rsp+11*8 | r9                        |
   683                                  ;              |---------------------------|
   684                                  ;     rsp+10*8 | r10                       |
   685                                  ;              |---------------------------|
   686                                  ;     rsp+9*8  | r11                       |
   687                                  ;              |---------------------------|
   688                                  ;     rsp+8*8  | r12                       |
   689                                  ;              |---------------------------|
   690                                  ;     rsp+7*8  | r13                       |
   691                                  ;              |---------------------------|
   692                                  ;     rsp+6*8  | r14                       |
   693                                  ;              |---------------------------|
   694                                  ;     rsp+5*8  | r15                       |
   695                                  ;              |---------------------------|
   696                                  ;     rsp+4*8  | rflags                    |
   697                                  ;              |---------------------------|
   698                                  ;     rsp+3*8  | flag either -1 or 0       |
   699                                  ;              |---------------------------|
   700                                  ;     rsp+2*8  | original r15              |
   701                                  ;              |---------------------------|
   702                                  ;     rsp+1*8  | original r14              |
   703                                  ;              |---------------------------|
   704                                  ;     rsp      | original r13              |
   705                                  ;              |---------------------------|
   706                                  
   707 000000EA 4C8B4C2440              mov        r9, [rsp+8*8]
   708 000000EF 4C8B442448              mov        r8, [rsp+9*8]
   709 000000F4 488B4C2450              mov        rcx, [rsp+10*8]
   710 000000F9 488B542458              mov        rdx, [rsp+11*8]
   711 000000FE 488B742460              mov        rsi, [rsp+12*8]
   712 00000103 48BF-                   mov        rdi, .registerformat2
   712 00000105 [7D00000000000000] 
   713 0000010D B800000000              mov        rax, 0
   714 00000112 E8(00000000)            call       printf
   715                                  
   716 00000117 58                      pop        rax                                              ;Remove and discard original r13 from the stack
   717 00000118 58                      pop        rax                                              ;Remove and discard original r14 from the stack
   718 00000119 58                      pop        rax                                              ;Remove and discard original r15 from the stack
   719                                  
   720                                  ;===== State of the integer stack at this time ============================================================================================================================
   721                                  
   722                                  ;              |---------------------------|
   723                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   724                                  ;              |---------------------------|
   725                                  ;     rsp+18*8 | arbitrary number from user|
   726                                  ;              |---------------------------|
   727                                  ;     rsp+17*8 | return address            |
   728                                  ;              |---------------------------|
   729                                  ;     rsp+16*8 | rbp                       |
   730                                  ;              |---------------------------|
   731                                  ;     rsp+15*8 | rax                       |
   732                                  ;              |---------------------------|
   733                                  ;     rsp+14*8 | rbx                       |
   734                                  ;              |---------------------------|
   735                                  ;     rsp+13*8 | rcx                       |
   736                                  ;              |---------------------------|
   737                                  ;     rsp+12*8 | rdx                       |
   738                                  ;              |---------------------------|
   739                                  ;     rsp+11*8 | rsi                       |
   740                                  ;              |---------------------------|
   741                                  ;     rsp+10*8 | rdi                       |
   742                                  ;              |---------------------------|
   743                                  ;     rsp+9*8  | r8                        |
   744                                  ;              |---------------------------|
   745                                  ;     rsp+8*8  | r9                        |
   746                                  ;              |---------------------------|
   747                                  ;     rsp+7*8  | r10                       |
   748                                  ;              |---------------------------|
   749                                  ;     rsp+6*8  | r11                       |
   750                                  ;              |---------------------------|
   751                                  ;     rsp+5*8  | r12                       |
   752                                  ;              |---------------------------|
   753                                  ;     rsp+4*8  | r13                       |
   754                                  ;              |---------------------------|
   755                                  ;     rsp+3*8  | r14                       |
   756                                  ;              |---------------------------|
   757                                  ;     rsp+2*8  | r15                       |
   758                                  ;              |---------------------------|
   759                                  ;     rsp+1*8  | rflags                    |
   760                                  ;              |---------------------------|
   761                                  ;     rsp      | flag either -1 or 0       |
   762                                  ;              |---------------------------|
   763                                  
   764                                  ;===== Output the sixth and seventh lines of the register dump ============================================================================================================
   765                                  
   766                                  ;At this time the original value of rflags is at rsp+8, which is second quadword from the top.
   767                                  
   768                                  ;Go into the stack and get a copy of that original rflags
   769 0000011A 488B5C2408              mov qword rbx, [rsp+8]                                      ;Now rbx contain a copy of rflags.
   770                                  
   771                                  ;First part of CCC-64 parameter-passing protocol setup: do the pushes for the right most parameters
   772                                  ;Begin process to extract the cf bit, which is bit #0 from the right.
   773 0000011F 4889D8                  mov rax, rbx                                                ;Place a copy of rflags into rax
   774 00000122 4883E001                and rax, cmask                                              ;rax has all zero bits except possibly position 0.
   775 00000126 50                      push qword rax                                              ;Count: push #1 of this section
   776                                  
   777                                  ;Begin process to extract the pf bit
   778 00000127 4889D8                  mov rax, rbx                                                ;Place a new copy of rflags into rax
   779 0000012A 4883E004                and rax, pmask                                              ;rax has all zero bits except possible position 2
   780 0000012E 48C1E802                shr rax, 2                                                  ;The pf bit is bit #2 from the right.
   781 00000132 50                      push qword rax                                              ;Count: push #2 of this section
   782                                  
   783                                  ;Begin process to extract the af bit
   784 00000133 4889D8                  mov rax, rbx
   785 00000136 4883E010                and rax, amask
   786 0000013A 48C1E804                shr rax, 4                                                  ;The af bit is bit #4 from the right.
   787 0000013E 50                      push qword rax                                              ;Count: push #3 of this section
   788                                  
   789                                  ;===== State of the integer stack at this time ============================================================================================================================
   790                                  
   791                                  ;              |---------------------------|
   792                                  ;     rsp+22*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   793                                  ;              |---------------------------|
   794                                  ;     rsp+21*8 | arbitrary number from user|
   795                                  ;              |---------------------------|
   796                                  ;     rsp+20*8 | return address            |
   797                                  ;              |---------------------------|
   798                                  ;     rsp+19*8 | rbp                       |
   799                                  ;              |---------------------------|
   800                                  ;     rsp+18*8 | rax                       |
   801                                  ;              |---------------------------|
   802                                  ;     rsp+17*8 | rbx                       |
   803                                  ;              |---------------------------|
   804                                  ;     rsp+16*8 | rcx                       |
   805                                  ;              |---------------------------|
   806                                  ;     rsp+15*8 | rdx                       |
   807                                  ;              |---------------------------|
   808                                  ;     rsp+14*8 | rsi                       |
   809                                  ;              |---------------------------|
   810                                  ;     rsp+13*8 | rdi                       |
   811                                  ;              |---------------------------|
   812                                  ;     rsp+12*8 | r8                        |
   813                                  ;              |---------------------------|
   814                                  ;     rsp+11*8 | r9                        |
   815                                  ;              |---------------------------|
   816                                  ;     rsp+10*8 | r10                       |
   817                                  ;              |---------------------------|
   818                                  ;     rsp+9*8  | r11                       |
   819                                  ;              |---------------------------|
   820                                  ;     rsp+8*8  | r12                       |
   821                                  ;              |---------------------------|
   822                                  ;     rsp+7*8  | r13                       |
   823                                  ;              |---------------------------|
   824                                  ;     rsp+6*8  | r14                       |
   825                                  ;              |---------------------------|
   826                                  ;     rsp+5*8  | r15                       |
   827                                  ;              |---------------------------|
   828                                  ;     rsp+4*8  | rflags                    |
   829                                  ;              |---------------------------|
   830                                  ;     rsp+3*8  | flag either -1 or 0       |
   831                                  ;              |---------------------------|
   832                                  ;     rsp+2*8  | cf bit                    |
   833                                  ;              |---------------------------|
   834                                  ;     rsp+1*8  | pf bit                    |
   835                                  ;              |---------------------------|
   836                                  ;     rsp      | af bit                    |
   837                                  ;              |---------------------------|
   838                                  
   839                                  ;Second part of CCC-64 parameter-passing protocol setup: move data into the five fixed registers acting as parameters
   840                                  
   841                                  ;Begin process to extract the zf bit: the zero bit
   842 0000013F 4889D8                  mov rax, rbx
   843 00000142 4883E040                and rax, zmask
   844 00000146 48C1E806                shr rax, 6
   845 0000014A 4989C1                  mov qword r9, rax                                           ;Parameter #6 of CCC
   846                                  
   847                                  ;Begin process to extract the sf bit: the sign bit
   848 0000014D 4889D8                  mov rax, rbx
   849 00000150 482580000000            and rax, smask
   850 00000156 48C1E807                shr rax, 7
   851 0000015A 4989C0                  mov qword r8, rax                                           ;Parameter #5 of CCC
   852                                  
   853                                  ;Begin process to extract the of bit: the overflow bit
   854 0000015D 4889D8                  mov rax, rbx
   855 00000160 482500080000            and rax, omask
   856 00000166 48C1E80B                shr rax, 11
   857 0000016A 4889C1                  mov qword rcx, rax                                          ;Parameter #4 of CCC
   858                                  
   859                                  ;Copy the original rflags data to rdx
   860 0000016D 4889DA                  mov qword rdx, rbx                                          ;Parameter #3 of CCC
   861                                  ;
   862                                  ;rip is a highly protected register in the sense that it is the only one providing neither read nor write privileges.  Therefore, the programmer cannot assign a value to
   863                                  ;rip nor read the value in rip.  The one technique to obtain the value stored in rip is to call a subprogram such as this one, showregisterssubprogram.  The call will
   864                                  ;place a copy of rip on the integer stack.  That value can be retrieved later from the integer stack, and that is what is done here.  That value is the address of the
   865                                  ;next instruction to execute when the current subprogram returns.
   866                                  
   867                                  ;Copy the rip at the time this subprogram was called; the copy goes into rsi, which is parameter #2 of CCC
   868 00000170 488BB424A0000000        mov qword rsi, [rsp+20*qwordsize]                           ;We use the return address as the value of rip at the time instantly before showregisters is called.
   869                                  
   870 00000178 48BF-                   mov qword rdi, .registerformat3                             ;Parameter #1 of CCC
   870 0000017A [E600000000000000] 
   871                                  
   872                                  ;Third part of the CCC-64 protocol
   873 00000182 B800000000              mov qword rax, 0
   874 00000187 E8(00000000)            call printf
   875                                  
   876                                  ;Reverse the three recent pushes.
   877 0000018C 58                      pop rax                                                     ;Discard the qword containing the af bit
   878 0000018D 58                      pop rax                                                     ;Discard the qword containing the pf bit
   879 0000018E 58                      pop rax                                                     ;Discard the qword containing the cf bit
   880                                  
   881                                  ;===== State of the integer stack at this time ============================================================================================================================
   882                                  
   883                                  ;              |---------------------------|
   884                                  ;     rsp+19*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
   885                                  ;              |---------------------------|
   886                                  ;     rsp+18*8 | arbitrary number from user|
   887                                  ;              |---------------------------|
   888                                  ;     rsp+17*8 | return address            |
   889                                  ;              |---------------------------|
   890                                  ;     rsp+16*8 | rbp                       |
   891                                  ;              |---------------------------|
   892                                  ;     rsp+15*8 | rax                       |
   893                                  ;              |---------------------------|
   894                                  ;     rsp+14*8 | rbx                       |
   895                                  ;              |---------------------------|
   896                                  ;     rsp+13*8 | rcx                       |
   897                                  ;              |---------------------------|
   898                                  ;     rsp+12*8 | rdx                       |
   899                                  ;              |---------------------------|
   900                                  ;     rsp+11*8 | rsi                       |
   901                                  ;              |---------------------------|
   902                                  ;     rsp+10*8 | rdi                       |
   903                                  ;              |---------------------------|
   904                                  ;     rsp+9*8  | r8                        |
   905                                  ;              |---------------------------|
   906                                  ;     rsp+8*8  | r9                        |
   907                                  ;              |---------------------------|
   908                                  ;     rsp+7*8  | r10                       |
   909                                  ;              |---------------------------|
   910                                  ;     rsp+6*8  | r11                       |
   911                                  ;              |---------------------------|
   912                                  ;     rsp+5*8  | r12                       |
   913                                  ;              |---------------------------|
   914                                  ;     rsp+4*8  | r13                       |
   915                                  ;              |---------------------------|
   916                                  ;     rsp+3*8  | r14                       |
   917                                  ;              |---------------------------|
   918                                  ;     rsp+2*8  | r15                       |
   919                                  ;              |---------------------------|
   920                                  ;     rsp+1*8  | rflags                    |
   921                                  ;              |---------------------------|
   922                                  ;     rsp      | flag either -1 or 0       |
   923                                  ;              |---------------------------|
   924                                  
   925                                  ;==========================================================================================================================================================================
   926                                  ;===== Begin State Component Restore ======================================================================================================================================
   927                                  ;==========================================================================================================================================================================
   928                                  
   929                                  ;===== Check the flag to determine if state components were really backed up ==============================================================================================
   930                                  
   931 0000018F 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
   932                                  
   933 00000190 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
   934 00000194 7426                    je         setreturnvalue                                   ;Go to set up the return value.
   935                                  
   936                                  ;Continue with restoration of state components;
   937                                  
   938                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
   939                                  
   940                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
   941 00000196 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
   942 0000019B B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
   943                                  
   944                                  ;Call the function
   945 000001A0 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
   946                                  
   947                                  ;Postcondition: The bitmap in now in edx:eax
   948                                  
   949                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
   950 000001A2 41BF07000000            mov        r15, 7
   951 000001A8 4C21F8                  and        rax, r15
   952 000001AB 41BF00000000            mov        r15, 0
   953 000001B1 4C21FA                  and        rdx, r15
   954                                  
   955 000001B4 0FAE2C25[00000000]      xrstor     [.backuparea]
   956                                  
   957                                  ;==========================================================================================================================================================================
   958                                  ;===== End State Component Restore ========================================================================================================================================
   959                                  ;==========================================================================================================================================================================
   960                                  
   961                                  
   962                                  setreturnvalue: ;=========== Set the value to be returned to the caller ===================================================================================================
   963                                  
   964 000001BC B800000000              mov        rax, 0                                           ;Send 0 back to the caller indicating a successful termination
   965                                  
   966                                  ;=========== Restore GPR values and return to the caller ==================================================================================================================
   967                                  
   968 000001C1 9D                      popf                                                        ;Restore rflags
   969 000001C2 415F                    pop        r15                                              ;Restore r15
   970 000001C4 415E                    pop        r14                                              ;Restore r14
   971 000001C6 415D                    pop        r13                                              ;Restore r13
   972 000001C8 415C                    pop        r12                                              ;Restore r12
   973 000001CA 415B                    pop        r11                                              ;Restore r11
   974 000001CC 415A                    pop        r10                                              ;Restore r10
   975 000001CE 4159                    pop        r9                                               ;Restore r9
   976 000001D0 4158                    pop        r8                                               ;Restore r8
   977 000001D2 5F                      pop        rdi                                              ;Restore rdi
   978 000001D3 5E                      pop        rsi                                              ;Restore rsi
   979 000001D4 5A                      pop        rdx                                              ;Restore rdx
   980 000001D5 59                      pop        rcx                                              ;Restore rcx
   981 000001D6 5B                      pop        rbx                                              ;Restore rbx
   982 000001D7 4883C408                add        rsp, 8                                           ;Remove the old value of rax from the stack and discard that value.
   983 000001DB 5D                      pop        rbp                                              ;Restore rbp
   984                                  
   985                                  ;The instruction "ret n" where n is a positive integer means "pop the stack once to obtain an address X where execution will resume, then add n to rsp effectively popping
   986                                  ;n number of bytes, then resume execution at the address X".
   987                                  
   988 000001DC C20800                  ret 8                                                       ;Pop the integer stack and resume execution at the address that was popped from the stack.
   989                                  
   990                                  ;===== End of program showregisters ========================================================================================================================================
   991                                  
   992                                  
   993                                  
   994                                  
   995                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
   996                                  
   997                                  
   998                                  
   999                                  ;==========================================================================================================================================================================
  1000                                  ;===== Begin subprogram dumpstack =====================================================================================================================================
  1001                                  ;===== Begin subprogram dumpstack=====================================================================================================================================
  1002                                  ;===== Begin subprogram dumpstack =====================================================================================================================================
  1003                                  ;==========================================================================================================================================================================
  1004                                  ;Module information
  1005                                  ;  This module's call name: dumpstacksubprogram
  1006                                  ;  Language: X86-64
  1007                                  ;  Syntax: Intel
  1008                                  ;  Date last modified: 2014-July-8
  1009                                  ;  Purpose: This module will show the contents of all integer registers including the flags register.
  1010                                  ;  Status: The present source code is in production.
  1011                                  ;
  1012                                  ;==========================================================================================================================================
  1013                                  ;                             Show Stack Subprogram
  1014                                  ;==========================================================================================================================================
  1015                                  ;
  1016                                  ;Program: showstacksubprogram
  1017                                  ;Purpose: Show the current state of the X86-64 stack.
  1018                                  ;This program is called by the macro code inside the file debug.inc.
  1019                                  ;A program should bring in the debug.inc into an application program via a statement such as
  1020                                  ;%include "debug.inc"
  1021                                  ;
  1022                                  ;File name: debug.asm
  1023                                  ;Language: X86-64 Intel syntax
  1024                                  ;Usage: CPSC240
  1025                                  ;Author: F. Holliday
  1026                                  ;Last update: 20130329
  1027                                  
  1028                                  ;Deficiency:  This program, showstacksubprogram, does not backup SSE2 registers.  This is a known issue and will be fixed as soon as time allows.
  1029                                  
  1030                                  ;Assemble: nasm -f elf64 -l debug.lis -o debug.o debug.asm
  1031                                  ;
  1032                                  ;Concerning the two pointers rbp and rsp.  The system stack, sometimes called the integer stack, is a built-in stack of 
  1033                                  ;quadwords.  (Don't confuse this stack with the floating point stack.)  The pointer rsp always points to the top of the
  1034                                  ;stack.  Use of the pointer rbp is optional.  That means that a programmer may use it or disregard it completely.  The
  1035                                  ;most common use of the rbp is to point to the start of a new activation record.  An activation record is created when
  1036                                  ;a subprogram is called, and it is destroyed when the subprogram returns.
  1037                                  ;
  1038                                  ;Important:  This program is built on rbp.  That means this program treats rbp as the top of the stack.  When calling
  1039                                  ;this program it requires three parameters: an arbitrary integer, the number of qwords outside of the stack to be
  1040                                  ;displayed, and the number of qwords inside the stack to be displayed.  Separator commas are placed after the first
  1041                                  ;and second parameters.  Example call:  dumpstack 59, 4, 10
  1042                                  
  1043                                  ;===== Sample of expected output from this subprogram =====================================================================================
  1044                                  
  1045                                  ;To view the integer stack using rbp as the top use a statement like the following:
  1046                                  ;  dumpstack 20, 2, 6
  1047                                  ;The results will be as in the following:
  1048                                  
  1049                                  ;Stack Dump # 20:  rbp = 00007fff3ab0bba0 rsp = 00007fff3ab0bb50
  1050                                  ;Offset    Address           Value
  1051                                  ;  +48  00007fff3ab0bbd0  0000000000000000
  1052                                  ;  +40  00007fff3ab0bbc8  00000000004006d0
  1053                                  ;  +32  00007fff3ab0bbc0  0000000100000000
  1054                                  ;  +24  00007fff3ab0bbb8  00007fff3ab0bc88
  1055                                  ;  +16  00007fff3ab0bbb0  0000000000000000
  1056                                  ;   +8  00007fff3ab0bba8  00007f318baf376d
  1057                                  ;   +0  00007fff3ab0bba0  0000000000000000
  1058                                  ;   -8  00007fff3ab0bb98  ffffffffffffff9d
  1059                                  ;  -16  00007fff3ab0bb90  00007fff3ab0bc80
  1060                                  
  1061                                  ;To view the integer stack using rsp as the top use a pair of statements like the following:
  1062                                  ;  mov rbp, rsp
  1063                                  ;  dumpstack 21, 2, 6
  1064                                  ;The results will be as in the following example
  1065                                  
  1066                                  ;Stack Dump # 21:  rbp = 00007fffe8e939b0 rsp = 00007fffe8e939b0
  1067                                  ;Offset    Address           Value
  1068                                  ;  +48  00007fffe8e939e0  00007fffe8e93a00
  1069                                  ;  +40  00007fffe8e939d8  00007fffe8e93a00
  1070                                  ;  +32  00007fffe8e939d0  00000000ffffffff
  1071                                  ;  +24  00007fffe8e939c8  00007f804ae98000
  1072                                  ;  +16  00007fffe8e939c0  0000000000000000
  1073                                  ;   +8  00007fffe8e939b8  00000000004004a0
  1074                                  ;   +0  00007fffe8e939b0  00000000ffffffff
  1075                                  ;   -8  00007fffe8e939a8  00007fffe8e939b0
  1076                                  ;  -16  00007fffe8e939a0  00007fffe8e939b0
  1077                                  
  1078                                  ;To view the contents of an array use a pair of statements like the following:
  1079                                  ;  mov rbp, myarray
  1080                                  ;  dumpstack 32, 0, 6
  1081                                  ;The contents of the array will be displayed in 8-bytes segments as in this example:
  1082                                  
  1083                                  ;Stack Dump # 32:  rbp = 0000000000602a28 rsp = 00007fffe8e939b0
  1084                                  ;Offset    Address           Value
  1085                                  ;  +48  0000000000602a58  0000000000000000
  1086                                  ;  +40  0000000000602a50  0000000000000000
  1087                                  ;  +32  0000000000602a48  0000000000000000
  1088                                  ;  +24  0000000000602a40  0000000000000000
  1089                                  ;  +16  0000000000602a38  0000000000000000
  1090                                  ;   +8  0000000000602a30  0000000000004000
  1091                                  ;   +0  0000000000602a28  c90fdaa22168c235
  1092                                  
  1093                                  ;==========================================================================================================================================
  1094                                  
  1095                                  ;Set constants via assembler directives
  1096                                  %define qwordsize qword 8                                   ;8 bytes
  1097                                  
  1098                                  extern printf
  1099                                  global showstacksubprogram                                  ;This declaration allows the subprogram to be called from outside this file.
  1100                                  
  1101                                  segment .data                                               ;This segment declares initialized data
  1102                                  
  1103 0000017D 537461636B2044756D-     stackheadformat db "Stack Dump # %d:  ", 
  1103 00000186 7020232025643A2020 
  1104 0000018F 726270203D20253031-                     db "rbp = %016lx rsp = %016lx", 10, 
  1104 00000198 366C7820727370203D-
  1104 000001A1 20253031366C780A   
  1105 000001A9 4F6666736574202020-                     db "Offset    Address           Value", 10, 0
  1105 000001B2 204164647265737320-
  1105 000001BB 202020202020202020-
  1105 000001C4 2056616C75650A00   
  1106                                  
  1107 000001CC 252B35642020253031-     stacklineformat db "%+5d  %016lx  %016lx", 10, 0
  1107 000001D5 366C78202025303136-
  1107 000001DE 6C780A00           
  1108                                  
  1109                                  segment .bss                                                ;This segment declares uninitialized data
  1110                                      ;This segment is empty
  1111                                  
  1112                                  segment .text                                               ;Executable instructions appear in this segment
  1113                                  
  1114                                  showstacksubprogram:                                        ;Where execution begins when this program is called.
  1115                                  
  1116                                  ;===== Backup all the registers that are used in this program =====================================================================
  1117 000001DF 55                      push rbp                                                    ;Backup the base pointer
  1118 000001E0 57                      push rdi                                                    ;Backup rdi
  1119 000001E1 56                      push rsi                                                    ;Backup rsi
  1120 000001E2 52                      push rdx                                                    ;Backup rdx
  1121 000001E3 51                      push rcx                                                    ;Backup rcx
  1122 000001E4 4150                    push r8                                                     ;Backup r8
  1123 000001E6 4151                    push r9                                                     ;Backup r9
  1124 000001E8 4152                    push r10                                                    ;Backup r10
  1125 000001EA 4153                    push r11                                                    ;Backup r11: printf often changes r11
  1126 000001EC 4154                    push r12                                                    ;Backup r12
  1127 000001EE 4155                    push r13                                                    ;Backup r13
  1128 000001F0 4156                    push r14                                                    ;Backup r14
  1129 000001F2 53                      push rbx                                                    ;Backup rbx
  1130 000001F3 9C                      pushf                                                       ;Backup rflags
  1131                                  ;r15 is not used in this subprogram.  rax is intentionally not backed up.
  1132                                  
  1133                                  ;===== Prepare to output the dump stack header =====================================================================================
  1134                                  ;At this time the integer stack has the following structure
  1135                                  ;              |---------------------------|
  1136                                  ;     rsp+19*8 | rsp                       |
  1137                                  ;              |---------------------------|
  1138                                  ;     rsp+18*8 | rbp                       |
  1139                                  ;              |---------------------------|
  1140                                  ;     rsp+17*8 | #qwords inside of stack   |
  1141                                  ;              |---------------------------|
  1142                                  ;     rsp+16*8 | #qwords outside of stack  |
  1143                                  ;              |---------------------------|
  1144                                  ;     rsp+15*8 | arbitrary number from user|
  1145                                  ;              |---------------------------|
  1146                                  ;     rsp+14*8 | return address            |
  1147                                  ;              |---------------------------|
  1148                                  ;     rsp+13*8 | rbp                       |
  1149                                  ;              |---------------------------|
  1150                                  ;     rsp+12*8 | rdi                       |
  1151                                  ;              |---------------------------|
  1152                                  ;     rsp+11*8 | rsi                       |
  1153                                  ;              |---------------------------|
  1154                                  ;     rsp+10*8 | rdx                       |
  1155                                  ;              |---------------------------|
  1156                                  ;     rsp+9*8  | rcx                       |
  1157                                  ;              |---------------------------|
  1158                                  ;     rsp+8*8  | r8                        |
  1159                                  ;              |---------------------------|
  1160                                  ;     rsp+7*8  | r9                        |
  1161                                  ;              |---------------------------|
  1162                                  ;     rsp+6*8  | r10                       |
  1163                                  ;              |---------------------------|
  1164                                  ;     rsp+5*8  | r11                       |
  1165                                  ;              |---------------------------|
  1166                                  ;     rsp+4*8  | r12                       |
  1167                                  ;              |---------------------------|
  1168                                  ;     rsp+3*8  | r13                       |
  1169                                  ;              |---------------------------|
  1170                                  ;     rsp+2*8  | r14                       |
  1171                                  ;              |---------------------------|
  1172                                  ;     rsp+1*8  | rbx                       |
  1173                                  ;              |---------------------------|
  1174                                  ;     rsp+0    | rflags                    |
  1175                                  ;              |---------------------------|
  1176                                  
  1177                                  ;===== Output the header prior to displaying the contents of memory =======================================================================
  1178                                  ;Assign values to be passed to printf for outputting the dump stack header
  1179 000001F4 48BF-                   mov qword rdi, stackheadformat                              ;The format of the header
  1179 000001F6 [7D01000000000000] 
  1180 000001FE 488B742478              mov qword rsi, [rsp+15*8]                                   ;Arbitrary number passed in from caller
  1181 00000203 488B942490000000        mov qword rdx, [rsp+18*8]                                   ;Retrieve the value of rbp
  1182 0000020B 488B8C2498000000        mov qword rcx, [rsp+19*8]                                   ;Retrieve the value of rsp
  1183 00000213 B800000000              mov qword rax, 0                                            ;Zero in rax signals to printf that no vector registers (xmm) are used.
  1184 00000218 E8(00000000)            call printf
  1185                                  
  1186                                  ;===== Set up conditions before entering a loop ===========================================================================================
  1187                                  ;Retrieve from the stack the number of qwords within the stack to be displayed
  1188 0000021D 4C8BAC2488000000        mov qword r13, [rsp+17*8]                                   ;r13 will serve as loop counter variable
  1189                                  ;Retrieve from the stack the number of qwords outside the stack to be displayed
  1190 00000225 4C8BB42480000000        mov qword r14, [rsp+16*8]                                   ;r14 will help define the loop termination condition
  1191 0000022D 49F7DE                  neg r14                                                     ;Negate r14.  Now r14 contains a negative integer
  1192                                  
  1193                                  ;Setup rbx as offset number that will appear in the first column of output.
  1194 00000230 488B842488000000        mov qword rax, [rsp+17*8]                                   ;Retrieve from the stack the number of qwords within the stack to be displayed.
  1195 00000238 41BC08000000            mov qword r12, 8                                            ;Temporarily store 8 in r12
  1196 0000023E 49F7E4                  mul r12                                                     ;Multiply rax by 8 bytes per qword
  1197 00000241 4889C3                  mov qword rbx, rax                                          ;Save the product in rbx (column 1 of output)
  1198                                  
  1199                                  ;Retrieve from the stack the original value of rbp; r12 will be the address that appears in the 2nd column of output.
  1200 00000244 4C8BA42490000000        mov qword r12, [rsp+18*8]                                   ;Copy rbp to r12
  1201 0000024C 4901DC                  add r12, rbx                                                ;Give r12 the first address to be display in column 2 of the output.
  1202                                  
  1203                                  beginloop:
  1204                                  
  1205                                  ;===== Prepare to output one line of the body of the stack dump ===========================================================================
  1206                                  ;Follow the CCC-64 protocol
  1207 0000024F 48BF-                   mov       rdi, stacklineformat                              ;Format for offset, address, and quadword value
  1207 00000251 [CC01000000000000] 
  1208 00000259 4889DE                  mov qword rsi, rbx                                          ;rbx stores the offset value
  1209 0000025C 4C89E2                  mov qword rdx, r12                                          ;r12 stores the address to be displayed
  1210 0000025F 488B0A                  mov qword rcx, [rdx]                                        ;rcx receives the contents of memory at rbp+40
  1211 00000262 B800000000              mov qword rax, 0                                            ;No vector registers contain data for printf
  1212 00000267 E8(00000000)            call printf
  1213                                  
  1214                                  ;===== Advance the variables 8 bytes in the direction of small addresses ==================================================================
  1215                                  
  1216 0000026C 4883EB08                sub rbx, 8                                                  ;rbx stores column 1, which is the offset value
  1217 00000270 4983EC08                sub r12, 8                                                  ;r12 stores column 2, which is the address value
  1218 00000274 49FFCD                  dec r13                                                     ;r13 is loop counter; it decrements from high value to low (possibly negative) value
  1219                                  
  1220                                  ;===== Check for loop termination condition ===============================================================================================
  1221 00000277 4D39F5                  cmp r13, r14                                                ;Compare loop variable r13 with terminating value r14
  1222 0000027A 7DD3                    jge beginloop                                               ;If r13 >= r14 then continue to iterate
  1223                                  
  1224                                  
  1225                                  ;OLD CODE BELOW -- This will eventually be removed
  1226                                  
  1227                                  ;===== Output the header prior to displaying the contents of memory =======================================================================
  1228                                  ;Assign values to be passed to printf for outputting the dump stack header
  1229                                  ;mov qword rdi, stackheadformat                              ;The format of the header
  1230                                  ;mov qword rsi, [rsp+10*8]                                   ;Arbitrary number passed in from caller
  1231                                  ;mov qword rdx, [rsp+13*8]                                   ;Retrieve the value of rbp
  1232                                  ;mov qword rcx, [rsp+14*8]                                   ;Retrieve the value of rsp
  1233                                  ;mov qword rax, 0                                            ;Zero in rax signals to printf that no vector registers (xmm) are used.
  1234                                  ;call printf
  1235                                  
  1236                                  ;===== Set up conditions before entering a loop ===========================================================================================
  1237                                  ;Retrieve from the stack the number of qwords within the stack to be displayed
  1238                                  ;mov qword r13, [rsp+12*8]                                   ;r13 will serve as loop counter variable
  1239                                  ;Retrieve from the stack the number of qwords outside the stack to be displayed
  1240                                  ;mov qword r14, [rsp+11*8]                                   ;r14 will help define the loop termination condition
  1241                                  ;neg r14                                                     ;Negate r14.  Now r14 contains a negative integer
  1242                                  
  1243                                  ;Setup rbx as offset number that will appear in the first column of output.
  1244                                  ;mov qword rax, [rsp+12*8]                                   ;Retrieve from the stack the number of qwords within the stack to be displayed.
  1245                                  ;mov qword r12, 8                                            ;Temporarily store 8 in r12
  1246                                  ;mul r12                                                     ;Multiply rax by 8 bytes per qword
  1247                                  ;mov qword rbx, rax                                          ;Save the product in rbx (column 1 of output)
  1248                                  
  1249                                  ;Retrieve from the stack the original value of rbp; r10 will be the address that appears in the 2nd column of output.
  1250                                  ;mov qword r10, [rsp+13*8]                                   ;Copy rbp to r10
  1251                                  ;add r10, rbx                                                ;Give r10 the first address to be display in column 2 of the output.
  1252                                  
  1253                                  ;beginloop:
  1254                                  
  1255                                  ;===== Prepare to output one line of the body of the stack dump ===========================================================================
  1256                                  ;Follow the CCC-64 protocol
  1257                                  ;mov       rdi, stacklineformat                              ;Format for offset, address, and quadword value
  1258                                  ;mov qword rsi, rbx                                          ;rbx stores the offset value
  1259                                  ;mov qword rdx, r10                                          ;r10 stores the address to be displayed
  1260                                  ;mov qword rcx, [rdx]                                        ;rcx receives the contents of memory at rbp+40
  1261                                  ;mov qword rax, 0                                            ;No vector registers contain data for printf
  1262                                  ;call printf
  1263                                  
  1264                                  ;===== Advance the variables 8 bytes in the direction of small addresses ==================================================================
  1265                                  
  1266                                  ;sub rbx, 8                                                  ;rbx stores column 1, which is the offset value
  1267                                  ;sub r10, 8                                                  ;r10 stores column 2, which is the address value
  1268                                  ;dec r13                                                     ;r13 is loop counter; it decrements from high value to low (possibly negative) value
  1269                                  
  1270                                  ;===== Check for loop termination condition ===============================================================================================
  1271                                  ;cmp r13, r14                                                ;Compare loop variable r13 with terminating value r14
  1272                                  ;jge beginloop                                               ;If r13 >= r14 then continue to iterate
  1273                                  
  1274                                  
  1275                                  ;END OLD CODE -- End of old stuff that will be removed.
  1276                                  
  1277                                  
  1278                                  ;===== Restore original values to integer registers =======================================================================================
  1279                                  
  1280 0000027C 9D                      popf                                                        ;Restore rflags
  1281 0000027D 5B                      pop rbx                                                     ;Restore rbx
  1282 0000027E 415E                    pop r14                                                     ;Restore r14
  1283 00000280 415D                    pop r13                                                     ;Restore r13
  1284 00000282 415C                    pop r12                                                     ;Restore r12
  1285 00000284 415B                    pop r11                                                     ;Restore r11
  1286 00000286 415A                    pop r10                                                     ;Restore r10
  1287 00000288 4159                    pop r9                                                      ;Restore r9
  1288 0000028A 4158                    pop r8                                                      ;Restore r8
  1289 0000028C 59                      pop rcx                                                     ;Restore rcx
  1290 0000028D 5A                      pop rdx                                                     ;Restore rdx
  1291 0000028E 5E                      pop rsi                                                     ;Restore rsi
  1292 0000028F 5F                      pop rdi                                                     ;Restore rdi
  1293 00000290 5D                      pop rbp                                                     ;Restore rbp
  1294                                  
  1295                                  ;Now the number of 8-byte pushes equals the number of 8-byte pops.
  1296                                  ;
  1297                                  ;It is time to leave this program.
  1298 00000291 C22800                  ret 40                                                      ;Return to address on top of stack and add 5*8 to rsp.
  1299                                  ;End of showstacksubprogram
  1300                                  
  1301                                  ;==========================================================================================================================================
  1302                                  ;                             Show FPU registers subprogram
  1303                                  ;==========================================================================================================================================
  1304                                  ;
  1305                                  ;Program: showfpusubprogram
  1306                                  ;Purpose: Show the current state of the FPU87 stack of registers.  Each member of the stack is an individual 10-bytes register in FPU87 
  1307                                  ;extended format.
  1308                                  ;This program is called by the macro code inside the file debug.inc.
  1309                                  ;A program should bring in the debug.inc into an application program via a statement such as
  1310                                  ;%include "debug.inc"
  1311                                  ;
  1312                                  ;File name: debug.asm
  1313                                  ;Language: X86-64
  1314                                  ;Usage: CPSC240
  1315                                  ;Author: F. Holliday
  1316                                  ;Last update: 2012-April-27
  1317                                  
  1318                                  ;Credit: The concepts for this program "showfpusubprogram" originated with a similar program written by Dr Paul Carter, and posted at the
  1319                                  ;website www.drpaulcarter.com/pcasm .  His original program is somewhat more sophisticated than this one; for example, to allocate space on
  1320                                  ;the integer stack he does not perform 14 individual pushes of one quadword per push.  He uses more advanced techniques to accomplish his 
  1321                                  ;goals, and thereby needs fewer instructions.  Nevertheless, this program implements much of his original work using simpler and more 
  1322                                  ;tedious programming techniques.
  1323                                  
  1324                                  ;Deficiency:  This program, showfpusubprogram, does not backup SSE2 registers.  This is a known issue and will be fixed as soon as time allows.
  1325                                  
  1326                                  ;Assemble: nasm -f elf64 -l debug.lis -o debug.o debug.asm
  1327                                  
  1328                                  ;Give a name to a famous number via assembler directive
  1329                                  %define qwordsize 8                                         ;8 bytes
  1330                                  
  1331                                  ;Set masks for Control Word via assembler directives
  1332                                  %define xcontrol 0000000000001000h                          ;bit #12
  1333                                  %define rcontrol 0000000000000c00h                          ;bits #10-11
  1334                                  %define pcontrol 0000000000000300h                          ;bits #8-9
  1335                                  %define pmask    0000000000000020h                          ;bit #5
  1336                                  %define umask    0000000000000010h                          ;bit #4
  1337                                  %define omask    0000000000000008h                          ;bit #3
  1338                                  %define zmask    0000000000000004h                          ;bit #2
  1339                                  %define dmask    0000000000000002h                          ;bit #1
  1340                                  %define imask    0000000000000001h                          ;bit #0 
  1341                                  
  1342                                  ;Set masks for Status Word via assembler directives
  1343                                  %define iemask 0000000000000001h                            ;bit #0
  1344                                  %define demask 0000000000000002h                            ;bit #1
  1345                                  %define zemask 0000000000000004h                            ;bit #2
  1346                                  %define oemask 0000000000000008h                            ;bit #3
  1347                                  %define uemask 0000000000000010h                            ;bit #4
  1348                                  %define pemask 0000000000000020h                            ;bit #5
  1349                                  %define sfmask 0000000000000040h                            ;bit #6
  1350                                  %define esmask 0000000000000080h                            ;bit #7
  1351                                  %define c0mask 0000000000000100h                            ;bit #8
  1352                                  %define c1mask 0000000000000200h                            ;bit #9
  1353                                  %define c2mask 0000000000000400h                            ;bit #10
  1354                                  %define tpmask 0000000000003800h                            ;bits #11-13
  1355                                  %define c3mask 0000000000004000h                            ;bit #14
  1356                                  %define bmask  0000000000008000h                            ;bit #15
  1357                                  
  1358                                  ;Set masks for the Tag Word via assembler directives
  1359                                  %define tag7mask 000000000000c000h                          ;bits #14-15
  1360                                  %define tag6mask 0000000000003000h                          ;bits #12-13
  1361                                  %define tag5mask 0000000000000c00h                          ;bits #10-11
  1362                                  %define tag4mask 0000000000000300h                          ;bits #8-9
  1363                                  %define tag3mask 00000000000000c0h                          ;bits #6-7
  1364                                  %define tag2mask 0000000000000030h                          ;bits #4-5
  1365                                  %define tag1mask 000000000000000ch                          ;bits #2-3
  1366                                  %define tag0mask 0000000000000003h                          ;bits #0-1
  1367                                  
  1368                                  extern printf
  1369                                  
  1370                                  segment .data                                               ;This segment declares initialized data
  1371                                  
  1372 000001E2 0A5838372046505520-     x87headformat db 10, "X87 FPU Display #%d", 10, "Control Word = %.4x Status Word = %.4x Tag Word = %.4x", 10, 0
  1372 000001EB 446973706C61792023-
  1372 000001F4 25640A436F6E74726F-
  1372 000001FD 6C20576F7264203D20-
  1372 00000206 252E34782053746174-
  1372 0000020F 757320576F7264203D-
  1372 00000218 20252E347820546167-
  1372 00000221 20576F7264203D2025-
  1372 0000022A 2E34780A00         
  1373 0000022F 257300                  stringformat db "%s", 0
  1374 00000232 526567697374657220-     columnheadings db "Register Extended hex number   Tag", 10, 0
  1374 0000023B 457874656E64656420-
  1374 00000244 686578206E756D6265-
  1374 0000024D 722020205461670A00 
  1375 00000256 202073743720202020-     st7format db "  st7    %04x%016lx  %s", 10, 0
  1375 0000025F 25303478253031366C-
  1375 00000268 78202025730A00     
  1376 0000026F 202073743620202020-     st6format db "  st6    %04x%016lx  %s", 10, 0
  1376 00000278 25303478253031366C-
  1376 00000281 78202025730A00     
  1377 00000288 202073743520202020-     st5format db "  st5    %04x%016lx  %s", 10, 0
  1377 00000291 25303478253031366C-
  1377 0000029A 78202025730A00     
  1378 000002A1 202073743420202020-     st4format db "  st4    %04x%016lx  %s", 10, 0
  1378 000002AA 25303478253031366C-
  1378 000002B3 78202025730A00     
  1379 000002BA 202073743320202020-     st3format db "  st3    %04x%016lx  %s", 10, 0
  1379 000002C3 25303478253031366C-
  1379 000002CC 78202025730A00     
  1380 000002D3 202073743220202020-     st2format db "  st2    %04x%016lx  %s", 10, 0
  1380 000002DC 25303478253031366C-
  1380 000002E5 78202025730A00     
  1381 000002EC 202073743120202020-     st1format db "  st1    %04x%016lx  %s", 10, 0
  1381 000002F5 25303478253031366C-
  1381 000002FE 78202025730A00     
  1382 00000305 202073743020202020-     st0format db "  st0    %04x%016lx  %s", 10, 0
  1382 0000030E 25303478253031366C-
  1382 00000317 78202025730A00     
  1383                                  ;
  1384 0000031E 456D707479206F7220-     emptyspace db "Empty or Free space", 0
  1384 00000327 467265652073706163-
  1384 00000330 6500               
  1385 00000332 56616C6964206E756D-     validnumber db "Valid number", 0
  1385 0000033B 62657200           
  1386 0000033F 5A65726F206E756D62-     floatingpointzero db "Zero number", 0
  1386 00000348 657200             
  1387 0000034B 5370656369616C3A20-     specialnumber db "Special: denormal, infinity, or nan", 0
  1387 00000354 64656E6F726D616C2C-
  1387 0000035D 20696E66696E697479-
  1387 00000366 2C206F72206E616E00 
  1388 0000036F 0A00                    newline db 10, 0 ;temporary
  1389                                  ;
  1390                                  ;Information about the FPU Control Word was obtained from http://www.c-jump.com/CIS77/reference/Intel/CIS77_24319002/index.html ==> Section 7.3.4
  1391 00000371 436F6E74726F6C2077-     controlwordheading db "Control word by individual components:", 10, "Bit# Value Mnemonic Description", 10, 0
  1391 0000037A 6F726420627920696E-
  1391 00000383 646976696475616C20-
  1391 0000038C 636F6D706F6E656E74-
  1391 00000395 733A0A426974232056-
  1391 0000039E 616C7565204D6E656D-
  1391 000003A7 6F6E69632044657363-
  1391 000003B0 72697074696F6E0A00 
  1392 000003B9 31332D313520202D20-     controlwordbit15_13 db "13-15  -     --     Unused", 10, 0
  1392 000003C2 202020202D2D202020-
  1392 000003CB 2020556E757365640A-
  1392 000003D4 00                 
  1393 000003D5 203132202020202530-     controlwordbit12 db " 12    %01x     X      Infinity control", 10, 0
  1393 000003DE 317820202020205820-
  1393 000003E7 2020202020496E6669-
  1393 000003F0 6E69747920636F6E74-
  1393 000003F9 726F6C0A00         
  1394 000003FE 31302D313120202530-     controlwordbit11_10 db "10-11  %01x     RC     Rounding control", 10, 0
  1394 00000407 317820202020205243-
  1394 00000410 2020202020526F756E-
  1394 00000419 64696E6720636F6E74-
  1394 00000422 726F6C0A00         
  1395 00000427 20382D392020202530-     controlwordbit9_8 db " 8-9   %01x     PC     Precision control", 10, 0
  1395 00000430 317820202020205043-
  1395 00000439 202020202050726563-
  1395 00000442 6973696F6E20636F6E-
  1395 0000044B 74726F6C0A00       
  1396 00000451 20362D372020202D20-     controlwordbit7_6 db " 6-7   -     --     Unused", 10, 0
  1396 0000045A 202020202D2D202020-
  1396 00000463 2020556E757365640A-
  1396 0000046C 00                 
  1397 0000046D 202035202020202530-     controlwordbit5 db "  5    %01x     PM     Precision mask", 10, 0
  1397 00000476 31782020202020504D-
  1397 0000047F 202020202050726563-
  1397 00000488 6973696F6E206D6173-
  1397 00000491 6B0A00             
  1398 00000494 202034202020202530-     controlwordbit4 db "  4    %01x     UM     Underflow mask", 10, 0
  1398 0000049D 31782020202020554D-
  1398 000004A6 2020202020556E6465-
  1398 000004AF 72666C6F77206D6173-
  1398 000004B8 6B0A00             
  1399 000004BB 202033202020202530-     controlwordbit3 db "  3    %01x     OM     Overflow mask", 10, 0
  1399 000004C4 317820202020204F4D-
  1399 000004CD 20202020204F766572-
  1399 000004D6 666C6F77206D61736B-
  1399 000004DF 0A00               
  1400 000004E1 202032202020202530-     controlwordbit2 db "  2    %01x     ZM     Zero divide mask", 10, 0
  1400 000004EA 317820202020205A4D-
  1400 000004F3 20202020205A65726F-
  1400 000004FC 20646976696465206D-
  1400 00000505 61736B0A00         
  1401 0000050A 202031202020202530-     controlwordbit1 db "  1    %01x     DM     Denormalized operand mask", 10, 0
  1401 00000513 31782020202020444D-
  1401 0000051C 202020202044656E6F-
  1401 00000525 726D616C697A656420-
  1401 0000052E 6F706572616E64206D-
  1401 00000537 61736B0A00         
  1402 0000053C 202030202020202530-     controlwordbit0 db "  0    %01x     IM     Invalid operation mask", 10, 0            
  1402 00000545 31782020202020494D-
  1402 0000054E 2020202020496E7661-
  1402 00000557 6C6964206F70657261-
  1402 00000560 74696F6E206D61736B-
  1402 00000569 0A00               
  1403                                  
  1404                                  ;Reference regarding FPU Status Word: Plantz (2012), Table 14.4, page 355.
  1405 0000056B 53746174757320776F-     statuswordheading db "Status word by individual bits (Plantz, page 355):", 10, "Bit# Value Mnemonic Description", 10, 0
  1405 00000574 726420627920696E64-
  1405 0000057D 6976696475616C2062-
  1405 00000586 6974732028506C616E-
  1405 0000058F 747A2C207061676520-
  1405 00000598 333535293A0A426974-
  1405 000005A1 232056616C7565204D-
  1405 000005AA 6E656D6F6E69632044-
  1405 000005B3 65736372697074696F-
  1405 000005BC 6E0A00             
  1406 000005BF 202030202020202530-     statuswordbit0 db "  0    %01x     IE     Invalid operation", 10, 0
  1406 000005C8 317820202020204945-
  1406 000005D1 2020202020496E7661-
  1406 000005DA 6C6964206F70657261-
  1406 000005E3 74696F6E0A00       
  1407 000005E9 202031202020202530-     statuswordbit1 db "  1    %01x     DE     Denormalized operation", 10, 0
  1407 000005F2 317820202020204445-
  1407 000005FB 202020202044656E6F-
  1407 00000604 726D616C697A656420-
  1407 0000060D 6F7065726174696F6E-
  1407 00000616 0A00               
  1408 00000618 202032202020202530-     statuswordbit2 db "  2    %01x     ZE     Zero divide", 10, 0
  1408 00000621 317820202020205A45-
  1408 0000062A 20202020205A65726F-
  1408 00000633 206469766964650A00 
  1409 0000063C 202033202020202530-     statuswordbit3 db "  3    %01x     OE     Overflow", 10, 0
  1409 00000645 317820202020204F45-
  1409 0000064E 20202020204F766572-
  1409 00000657 666C6F770A00       
  1410 0000065D 202034202020202530-     statuswordbit4 db "  4    %01x     UE     Underflow", 10, 0
  1410 00000666 317820202020205545-
  1410 0000066F 2020202020556E6465-
  1410 00000678 72666C6F770A00     
  1411 0000067F 202035202020202530-     statuswordbit5 db "  5    %01x     PE     Precision", 10, 0
  1411 00000688 317820202020205045-
  1411 00000691 202020202050726563-
  1411 0000069A 6973696F6E0A00     
  1412 000006A1 202036202020202530-     statuswordbit6 db "  6    %01x     SF     Stack fault", 10, 0
  1412 000006AA 317820202020205346-
  1412 000006B3 202020202053746163-
  1412 000006BC 6B206661756C740A00 
  1413 000006C5 202037202020202530-     statuswordbit7 db "  7    %01x     ES     Error summary status", 10, 0
  1413 000006CE 317820202020204553-
  1413 000006D7 20202020204572726F-
  1413 000006E0 722073756D6D617279-
  1413 000006E9 207374617475730A00 
  1414 000006F2 202038202020202530-     statuswordbit8 db "  8    %01x     C0     Condition code 0", 10, 0
  1414 000006FB 317820202020204330-
  1414 00000704 2020202020436F6E64-
  1414 0000070D 6974696F6E20636F64-
  1414 00000716 6520300A00         
  1415 0000071B 202039202020202530-     statuswordbit9 db "  9    %01x     C1     Condition code 1", 10, 0
  1415 00000724 317820202020204331-
  1415 0000072D 2020202020436F6E64-
  1415 00000736 6974696F6E20636F64-
  1415 0000073F 6520310A00         
  1416 00000744 203130202020202530-     statuswordbit10 db " 10    %01x     C2     Condition code 2", 10, 0
  1416 0000074D 317820202020204332-
  1416 00000756 2020202020436F6E64-
  1416 0000075F 6974696F6E20636F64-
  1416 00000768 6520320A00         
  1417 0000076D 31312D313320202530-     statuswordbit11_13 db "11-13  %01x     TOP    Top of stack", 10, 0
  1417 00000776 31782020202020544F-
  1417 0000077F 5020202020546F7020-
  1417 00000788 6F6620737461636B0A-
  1417 00000791 00                 
  1418 00000792 203134202020202530-     statuswordbit14 db " 14    %01x     C3     Condition code 3", 10, 0
  1418 0000079B 317820202020204333-
  1418 000007A4 2020202020436F6E64-
  1418 000007AD 6974696F6E20636F64-
  1418 000007B6 6520330A00         
  1419 000007BB 203135202020202530-     statuswordbit15 db " 15    %01x     B      FPU busy", 10, 0
  1419 000007C4 317820202020204220-
  1419 000007CD 202020202046505520-
  1419 000007D6 627573790A00       
  1420                                  ;
  1421                                  ;Information about the Tag Word was obtained from http://www.c-jump.com/CIS77/reference/Intel/CIS77_24319002/index.html ==> Section 7.3.6
  1422 000007DC 54616720776F726420-     tagwordheading db "Tag word by individual components each of size 2 bits:", 10,
  1422 000007E5 627920696E64697669-
  1422 000007EE 6475616C20636F6D70-
  1422 000007F7 6F6E656E7473206561-
  1422 00000800 6368206F662073697A-
  1422 00000809 65203220626974733A-
  1422 00000812 0A                 
  1423 00000813 5461672076616C7565-                    db "Tag values: 0=Valid number, 1=Floating point zero, 2=Special number (denormal, infinity, or nan), 3=Empty register (free space)", 10
  1423 0000081C 733A20303D56616C69-
  1423 00000825 64206E756D6265722C-
  1423 0000082E 20313D466C6F617469-
  1423 00000837 6E6720706F696E7420-
  1423 00000840 7A65726F2C20323D53-
  1423 00000849 70656369616C206E75-
  1423 00000852 6D626572202864656E-
  1423 0000085B 6F726D616C2C20696E-
  1423 00000864 66696E6974792C206F-
  1423 0000086D 72206E616E292C2033-
  1423 00000876 3D456D707479207265-
  1423 0000087F 676973746572202866-
  1423 00000888 726565207370616365-
  1423 00000891 290A               
  1424 00000893 426974232056616C75-                    db "Bit# Value   Description", 10, 0
  1424 0000089C 652020204465736372-
  1424 000008A5 697074696F6E0A00   
  1425 000008AD 31342D313520202530-     tag7bits15_14 db "14-15  %01x     Tag7", 10, 0
  1425 000008B6 317820202020205461-
  1425 000008BF 67370A00           
  1426 000008C3 31322D313320202530-     tag6bits13_12 db "12-13  %01x     Tag6", 10, 0
  1426 000008CC 317820202020205461-
  1426 000008D5 67360A00           
  1427 000008D9 31302D313120202530-     tag5bits11_10 db "10-11  %01x     Tag5", 10, 0
  1427 000008E2 317820202020205461-
  1427 000008EB 67350A00           
  1428 000008EF 20382D392020202530-     tag4bits9_8 db " 8-9   %01x     Tag4", 10, 0
  1428 000008F8 317820202020205461-
  1428 00000901 67340A00           
  1429 00000905 20362D372020202530-     tag3bits7_6 db " 6-7   %01x     Tag3", 10, 0
  1429 0000090E 317820202020205461-
  1429 00000917 67330A00           
  1430 0000091B 20342D352020202530-     tag2bits5_4 db " 4-5   %01x     Tag2", 10, 0
  1430 00000924 317820202020205461-
  1430 0000092D 67320A00           
  1431 00000931 20322D332020202530-     tag1bits3_2 db " 2-3   %01x     Tag1", 10, 0
  1431 0000093A 317820202020205461-
  1431 00000943 67310A00           
  1432 00000947 20302D312020202530-     tag0bits1_0 db " 0-1   %01x     Tag0", 10, 0
  1432 00000950 317820202020205461-
  1432 00000959 67300A00           
  1433                                  
  1434 0000095D 456E64206F66204650-     farewell db "End of FPU87 stack dump", 10, 0
  1434 00000966 55383720737461636B-
  1434 0000096F 2064756D700A00     
  1435                                  
  1436                                  segment .bss                                                ;This segment declares uninitialized data
  1437                                  ;
  1438                                  segment .text                                               ;This segment contains executable instructions
  1439                                  global showfpusubprogram                                    ;fpu refers to X87FPU also known as the st stack.
  1440                                  
  1441                                  showfpusubprogram:                                          ;A place where execution begins when this program is called.
  1442                                  
  1443                                  ;Safe programming practice: save all the data that may possibly be modified within this subprogram.  Intentionally the registers rsp and 
  1444                                  ;rax are not backed up.
  1445 00000294 55                      push rbp                                                    ;Back up the very important base pointer register
  1446 00000295 57                      push rdi                                                    ;Back up rdi
  1447 00000296 56                      push rsi                                                    ;Back up rsi
  1448 00000297 52                      push rdx                                                    ;Back up rdx
  1449 00000298 51                      push rcx                                                    ;Back up rcx
  1450 00000299 4150                    push r8                                                     ;Back up r8
  1451 0000029B 4151                    push r9                                                     ;Back up r9
  1452 0000029D 4152                    push r10                                                    ;Back up r10
  1453 0000029F 4153                    push r11                                                    ;Back up r11
  1454 000002A1 4154                    push r12                                                    ;Back up r12
  1455 000002A3 4155                    push r13                                                    ;Back up r13
  1456 000002A5 4156                    push r14                                                    ;Back up r14
  1457 000002A7 4157                    push r15                                                    ;Back up r15
  1458 000002A9 53                      push rbx                                                    ;Back up rbx
  1459 000002AA 9C                      pushf                                                       ;Back up rflags
  1460                                  
  1461                                  ;= = = = = = Begin instructions to output X87 FPU = = = = = = = = =
  1462                                  ;
  1463                                  ;108 bytes of free storage is needed to store an image of the FPU.
  1464                                  ;Here we create 112 bytes of storage (14 qwords).
  1465 000002AB B800000000              mov qword rax, 0
  1466 000002B0 50                      push rax  ;push #1
  1467 000002B1 50                      push rax  ;push #2
  1468 000002B2 50                      push rax  ;push #3
  1469 000002B3 50                      push rax  ;push #4
  1470 000002B4 50                      push rax  ;push #5
  1471 000002B5 50                      push rax  ;push #6
  1472 000002B6 50                      push rax  ;push #7
  1473 000002B7 50                      push rax  ;push #8
  1474 000002B8 50                      push rax  ;push #9
  1475 000002B9 50                      push rax  ;push #10
  1476 000002BA 50                      push rax  ;push #11
  1477 000002BB 50                      push rax  ;push #12
  1478 000002BC 50                      push rax  ;push #13
  1479 000002BD 50                      push rax  ;push #14
  1480                                  
  1481                                  ;Place a copy of the entire FPU into the first 108 bytes of storage.
  1482 000002BE 9BDD3424                fsave [rsp]                                       ;There is an alternate command 'fnsave' that is less safe.  Here fsave is used.  After execution of
  1483                                  ;                                                 ;fsave the entire fpu is reset; that is, all data are wiped clean identical to using the finit or
  1484                                  ;                                                 ;the fninit instruction.
  1485                                  
  1486                                  ;Prepare for outputting the header line
  1487 000002C2 48BF-                   mov rdi, x87headformat                            ;Copy the starting address of the format to the first standard parameter, namely: rdi
  1487 000002C4 [E201000000000000] 
  1488 000002CC 488BB424F0000000        mov qword rsi, [rsp+30*qwordsize]                 ;Copy the identifier number provided by the caller to the second standard parameter, namely: rsi
  1489 000002D4 668B1C24                mov word bx, [rsp]                                ;Retrieve the control word
  1490 000002D8 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1491 000002DF 4889DA                  mov rdx, rbx                                      ;Copy the control word to the third standard parameter, namely: rdx
  1492 000002E2 668B5C2404              mov word bx, [rsp+4]                              ;Get the status word
  1493 000002E7 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1494 000002EE 4889D9                  mov rcx, rbx                                      ;Copy the status word to the fourth standard parameter, namely: rcx
  1495 000002F1 668B5C2408              mov word bx, [rsp+8]                              ;Get the tag word
  1496 000002F6 4881E3FFFF0000          and rbx, 000000000000ffffh                        ;Make sure the high order bits of rbx are zeros; only the low order word is preserved
  1497 000002FD 4989D8                  mov r8, rbx                                       ;Copy the tag word to the fifth standard parameter, namely: r8
  1498 00000300 B800000000              mov qword rax, 0                                  ;Set rax to 0 as standard signal to printf that only integer parameters are in use.
  1499 00000305 E8(00000000)            call printf
  1500                                  ;
  1501                                  ;
  1502                                  ;===== Begin section that outputs the contents of the Control Word ========================================================================
  1503                                  ;
  1504 0000030A 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the control word
  1504 0000030C [2F02000000000000] 
  1505 00000314 48BE-                   mov rsi, controlwordheading                       ;Provide the text for each heading over each column
  1505 00000316 [7103000000000000] 
  1506 0000031E B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1507 00000323 E8(00000000)            call printf
  1508                                  
  1509 00000328 41BF00000000            mov qword r15, 0
  1510 0000032E 66448B3C24              mov word r15w, [rsp]                              ;r15 is the backup copy of the control word; r15w is the lowest 16 bits of r15
  1511                                  
  1512 00000333 48BF-                   mov rdi, stringformat                             ;Set up for string output only; no numeric outputs
  1512 00000335 [2F02000000000000] 
  1513 0000033D 48BE-                   mov rsi, controlwordbit15_13                      ;Assign the start of the text to rsi
  1513 0000033F [B903000000000000] 
  1514 00000347 B800000000              mov qword rax, 0
  1515 0000034C E8(00000000)            call printf
  1516                                  
  1517 00000351 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1518 00000354 4881E300100000          and rbx, xcontrol                                 ;Zero out all bits of the control word except bit #12
  1519 0000035B 48C1EB0C                shr rbx, 12                                       ;Shift bit number 12 to position #0
  1520 0000035F 48BF-                   mov rdi, controlwordbit12
  1520 00000361 [D503000000000000] 
  1521 00000369 4889DE                  mov rsi, rbx
  1522 0000036C B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1523 00000371 E8(00000000)            call printf
  1524                                  
  1525 00000376 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1526 00000379 4881E3000C0000          and rbx, rcontrol                                 ;Zero out all bits of the control word except bits #10 and 11
  1527 00000380 48C1EB0A                shr rbx, 10                                       ;Shift bit number 10 to position #0
  1528 00000384 48BF-                   mov rdi, controlwordbit11_10
  1528 00000386 [FE03000000000000] 
  1529 0000038E 4889DE                  mov rsi, rbx
  1530 00000391 B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1531 00000396 E8(00000000)            call printf
  1532                                  ;
  1533 0000039B 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1534 0000039E 4881E300030000          and rbx, pcontrol
  1535 000003A5 48C1EB08                shr rbx, 8                                        ;Shift bit number 8 to position #0
  1536 000003A9 48BF-                   mov rdi, controlwordbit9_8
  1536 000003AB [2704000000000000] 
  1537 000003B3 4889DE                  mov rsi, rbx
  1538 000003B6 B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1539 000003BB E8(00000000)            call printf
  1540                                  ;
  1541 000003C0 48BF-                   mov rdi, stringformat                             ;Output a string message only; no numeric values will be displayed
  1541 000003C2 [2F02000000000000] 
  1542 000003CA 48BE-                   mov rsi, controlwordbit7_6                        ;Bits 7 and 6 are not used
  1542 000003CC [5104000000000000] 
  1543 000003D4 B800000000              mov qword rax, 0                                  ;No fp numbers will be passed to parameters
  1544 000003D9 E8(00000000)            call printf
  1545                                  ;
  1546 000003DE 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1547 000003E1 4883E320                and rbx, pmask
  1548 000003E5 48C1EB05                shr rbx, 5                                        ;Shift bit number 5 to position #0
  1549 000003E9 48BF-                   mov rdi, controlwordbit5
  1549 000003EB [6D04000000000000] 
  1550 000003F3 4889DE                  mov rsi, rbx
  1551 000003F6 B800000000              mov qword rax, 0
  1552 000003FB E8(00000000)            call printf
  1553                                  ;
  1554 00000400 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word
  1555 00000403 4883E310                and rbx, umask
  1556 00000407 48C1EB04                shr rbx, 4                                        ;Shift bit number 4 to position #0
  1557 0000040B 48BF-                   mov rdi, controlwordbit4
  1557 0000040D [9404000000000000] 
  1558 00000415 4889DE                  mov rsi, rbx
  1559 00000418 B800000000              mov qword rax, 0
  1560 0000041D E8(00000000)            call printf
  1561                                  ;
  1562 00000422 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1563 00000425 4883E308                and rbx, omask                                    ;Zero out all bits except bit #3
  1564 00000429 48C1EB03                shr rbx, 3                                        ;Shift bit number 3 to position #0
  1565 0000042D 48BF-                   mov rdi, controlwordbit3
  1565 0000042F [BB04000000000000] 
  1566 00000437 4889DE                  mov rsi, rbx
  1567 0000043A B800000000              mov qword rax, 0
  1568 0000043F E8(00000000)            call printf
  1569                                  ;
  1570 00000444 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1571 00000447 4883E304                and rbx, zmask
  1572 0000044B 48C1EB02                shr rbx, 2
  1573 0000044F 48BF-                   mov rdi, controlwordbit2
  1573 00000451 [E104000000000000] 
  1574 00000459 4889DE                  mov rsi, rbx
  1575 0000045C B800000000              mov qword rax, 0
  1576 00000461 E8(00000000)            call printf
  1577                                  ;
  1578 00000466 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1579 00000469 4883E302                and rbx, dmask
  1580 0000046D 48D1EB                  shr rbx, 1
  1581 00000470 48BF-                   mov rdi, controlwordbit1
  1581 00000472 [0A05000000000000] 
  1582 0000047A 4889DE                  mov rsi, rbx
  1583 0000047D B800000000              mov qword rax, 0
  1584 00000482 E8(00000000)            call printf
  1585                                  ;
  1586 00000487 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the control word; r15 is the permanent copy of the control word
  1587 0000048A 4883E301                and rbx, imask
  1588                                  ;No shifting of bits is necessary
  1589 0000048E 48BF-                   mov rdi, controlwordbit0
  1589 00000490 [3C05000000000000] 
  1590 00000498 4889DE                  mov rsi, rbx
  1591 0000049B B800000000              mov qword rax, 0
  1592 000004A0 E8(00000000)            call printf
  1593                                  ;
  1594                                  ;===== Begin section that outputs the bits of the Status Word =============================================================================
  1595                                  ;
  1596 000004A5 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the status word
  1596 000004A7 [2F02000000000000] 
  1597 000004AF 48BE-                   mov rsi, statuswordheading                        ;Provide the text for each heading over each column
  1597 000004B1 [6B05000000000000] 
  1598 000004B9 B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1599 000004BE E8(00000000)            call printf
  1600                                  ;
  1601 000004C3 41BF00000000            mov qword r15, 0
  1602 000004C9 66448B7C2404            mov word r15w, [rsp+4]                            ;r15 is the backup copy of the status word; r15w is the lowest 16 bits of r15
  1603 000004CF 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the status word
  1604 000004D2 4881E300800000          and rbx, bmask                                    ;Zero out all bits of status word except bit #15
  1605 000004D9 48C1EB0F                shr rbx, 15                                       ;Shift bit number 15 to position #0
  1606 000004DD 48BF-                   mov rdi, statuswordbit15
  1606 000004DF [BB07000000000000] 
  1607 000004E7 4889DE                  mov rsi, rbx
  1608 000004EA B800000000              mov qword rax, 0
  1609 000004EF E8(00000000)            call printf
  1610                                  ;
  1611 000004F4 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1612 000004F7 4881E300400000          and rbx, c3mask                                   ;Zero out all bits of status word except bit #14
  1613 000004FE 48C1EB0E                shr rbx, 14                                       ;Shift bit number 14 to position #0
  1614 00000502 48BF-                   mov rdi, statuswordbit14
  1614 00000504 [9207000000000000] 
  1615 0000050C 4889DE                  mov rsi, rbx
  1616 0000050F B800000000              mov qword rax, 0
  1617 00000514 E8(00000000)            call printf
  1618                                  ;
  1619 00000519 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1620 0000051C 4881E300380000          and rbx, tpmask                                   ;Zero out all bits of status word except bits #13, 12, and 11
  1621 00000523 48C1EB0B                shr rbx, 11                                       ;Shift bits 13, 12 and 11 to positions 2, 1, and 0
  1622 00000527 48BF-                   mov rdi, statuswordbit11_13
  1622 00000529 [6D07000000000000] 
  1623 00000531 4889DE                  mov rsi, rbx
  1624 00000534 B800000000              mov qword rax, 0
  1625 00000539 E8(00000000)            call printf
  1626                                  ;
  1627 0000053E 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1628 00000541 4881E300040000          and rbx, c2mask                                   ;Zero out all bits of status word except bit #10
  1629 00000548 48C1EB0A                shr rbx, 10                                       ;Shift bit number 10 to position #0
  1630 0000054C 48BF-                   mov rdi, statuswordbit10
  1630 0000054E [4407000000000000] 
  1631 00000556 4889DE                  mov rsi, rbx
  1632 00000559 B800000000              mov qword rax, 0
  1633 0000055E E8(00000000)            call printf
  1634                                  ;
  1635 00000563 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1636 00000566 4881E300020000          and rbx, c1mask                                   ;Zero out all bits of status word except bit #9
  1637 0000056D 48C1EB09                shr rbx, 9                                        ;Shift bit number 9 to position #0
  1638 00000571 48BF-                   mov rdi, statuswordbit9
  1638 00000573 [1B07000000000000] 
  1639 0000057B 4889DE                  mov rsi, rbx
  1640 0000057E B800000000              mov qword rax, 0
  1641 00000583 E8(00000000)            call printf
  1642                                  ;
  1643 00000588 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1644 0000058B 4881E300010000          and rbx, c0mask                                   ;Zero out all bits of status word except bit #8
  1645 00000592 48C1EB08                shr rbx, 8                                        ;Shift bit number 8 to position #0
  1646 00000596 48BF-                   mov rdi, statuswordbit8
  1646 00000598 [F206000000000000] 
  1647 000005A0 4889DE                  mov rsi, rbx
  1648 000005A3 B800000000              mov qword rax, 0
  1649 000005A8 E8(00000000)            call printf
  1650                                  ;
  1651 000005AD 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1652 000005B0 4881E380000000          and rbx, esmask                                   ;Zero out all bits of status word except bit #7
  1653 000005B7 48C1EB07                shr rbx, 7                                        ;Shift bit number 7 to position #0
  1654 000005BB 48BF-                   mov rdi, statuswordbit7
  1654 000005BD [C506000000000000] 
  1655 000005C5 4889DE                  mov rsi, rbx
  1656 000005C8 B800000000              mov qword rax, 0
  1657 000005CD E8(00000000)            call printf
  1658                                  ;
  1659 000005D2 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1660 000005D5 4883E340                and rbx, sfmask                                   ;Zero out all bits of status word except bit #6
  1661 000005D9 48C1EB06                shr rbx, 6                                        ;Shift bit number 6 to position #0
  1662 000005DD 48BF-                   mov rdi, statuswordbit6
  1662 000005DF [A106000000000000] 
  1663 000005E7 4889DE                  mov rsi, rbx
  1664 000005EA B800000000              mov qword rax, 0
  1665 000005EF E8(00000000)            call printf
  1666                                  ;
  1667 000005F4 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1668 000005F7 4883E320                and rbx, pemask                                   ;Zero out all bits of status word except bit #5
  1669 000005FB 48C1EB05                shr rbx, 5                                        ;Shift bit number 5 to position #0
  1670 000005FF 48BF-                   mov rdi, statuswordbit5
  1670 00000601 [7F06000000000000] 
  1671 00000609 4889DE                  mov rsi, rbx
  1672 0000060C B800000000              mov qword rax, 0
  1673 00000611 E8(00000000)            call printf
  1674                                  ;
  1675 00000616 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1676 00000619 4883E310                and rbx, uemask                                   ;Zero out all bits of status word except bit #4
  1677 0000061D 48C1EB04                shr rbx, 4                                        ;Shift bit number 4 to position #0
  1678 00000621 48BF-                   mov rdi, statuswordbit4
  1678 00000623 [5D06000000000000] 
  1679 0000062B 4889DE                  mov rsi, rbx
  1680 0000062E B800000000              mov qword rax, 0
  1681 00000633 E8(00000000)            call printf
  1682                                  ;
  1683 00000638 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1684 0000063B 4883E308                and rbx, oemask                                   ;Zero out all bits of status word except bit #3
  1685 0000063F 48C1EB03                shr rbx, 3                                        ;Shift bit number 3 to position #0
  1686 00000643 48BF-                   mov rdi, statuswordbit3
  1686 00000645 [3C06000000000000] 
  1687 0000064D 4889DE                  mov rsi, rbx
  1688 00000650 B800000000              mov qword rax, 0
  1689 00000655 E8(00000000)            call printf
  1690                                  ;
  1691 0000065A 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1692 0000065D 4883E304                and rbx, zemask                                   ;Zero out all bits of the status word except bit #2
  1693 00000661 48C1EB02                shr rbx, 2                                        ;Shift bit number 2 to position #0
  1694 00000665 48BF-                   mov rdi, statuswordbit2
  1694 00000667 [1806000000000000] 
  1695 0000066F 4889DE                  mov rsi, rbx
  1696 00000672 B800000000              mov qword rax, 0
  1697 00000677 E8(00000000)            call printf
  1698                                  ;
  1699 0000067C 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1700 0000067F 4883E302                and rbx, demask                                   ;Zero out all bits of the status word except bit #1
  1701 00000683 48D1EB                  shr rbx, 1                                        ;Shift bit number 1 to position #0
  1702 00000686 48BF-                   mov rdi, statuswordbit1
  1702 00000688 [E905000000000000] 
  1703 00000690 4889DE                  mov rsi, rbx
  1704 00000693 B800000000              mov qword rax, 0
  1705 00000698 E8(00000000)            call printf
  1706                                  ;
  1707 0000069D 4C89FB                  mov rbx, r15                                      ;Get a new copy of the status word
  1708 000006A0 4883E301                and rbx, iemask                                   ;Zero out all bits of the status word except bit #0
  1709                                  ;No shifting of bits is necessary
  1710 000006A4 48BF-                   mov rdi, statuswordbit0
  1710 000006A6 [BF05000000000000] 
  1711 000006AE 4889DE                  mov rsi, rbx
  1712 000006B1 B800000000              mov qword rax, 0
  1713 000006B6 E8(00000000)            call printf
  1714                                  ;
  1715                                  ;===== Begin section that outputs the contents of the Tag Word ============================================================================
  1716                                  ;
  1717 000006BB 48BF-                   mov rdi, stringformat                             ;Set up for outputting headings over individual columns of the status word
  1717 000006BD [2F02000000000000] 
  1718 000006C5 48BE-                   mov rsi, tagwordheading                           ;Provide the text for each heading over each column
  1718 000006C7 [DC07000000000000] 
  1719 000006CF B800000000              mov qword rax, 0                                  ;rax must be zero unless the output includes fp numbers
  1720 000006D4 E8(00000000)            call printf
  1721                                  ;
  1722 000006D9 41BF00000000            mov qword r15, 0
  1723 000006DF 66448B7C2408            mov word r15w, [rsp+8]                            ;r15 is the backup copy of the tag word; r15w is the lowest 16 bits of r15
  1724 000006E5 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the tag word
  1725 000006E8 4881E300C00000          and rbx, tag7mask                                 ;Zero out all bits except bits #15 and 14
  1726 000006EF 48C1EB0E                shr rbx, 14                                       ;Shift bit number 14 to position #0
  1727 000006F3 48BF-                   mov rdi, tag7bits15_14
  1727 000006F5 [AD08000000000000] 
  1728 000006FD 4889DE                  mov rsi, rbx
  1729 00000700 B800000000              mov qword rax, 0
  1730 00000705 E8(00000000)            call printf
  1731                                  ;
  1732 0000070A 4C89FB                  mov rbx, r15                                      ;rbx is the working copy of the tag word
  1733 0000070D 4881E300300000          and rbx, tag6mask                                 ;Zero out all bits except bits #13 and 12
  1734 00000714 48C1EB0C                shr rbx, 12                                       ;Shift bit number 12 to position #0
  1735 00000718 48BF-                   mov rdi, tag6bits13_12                            ;Place address of format into first standard parameter
  1735 0000071A [C308000000000000] 
  1736 00000722 4889DE                  mov rsi, rbx                                      ;Place tag6 into the second standard parameter
  1737 00000725 B800000000              mov qword rax, 0                                  ;Indicate that no fp numbers will be passed to the function printf
  1738 0000072A E8(00000000)            call printf                                       ;Make print do the work
  1739                                  ;
  1740 0000072F 4C89FB                  mov rbx, r15
  1741 00000732 4881E3000C0000          and rbx, tag5mask
  1742 00000739 48C1EB0A                shr rbx, 10
  1743 0000073D 48BF-                   mov rdi, tag5bits11_10
  1743 0000073F [D908000000000000] 
  1744 00000747 4889DE                  mov rsi, rbx
  1745 0000074A B800000000              mov qword rax, 0
  1746 0000074F E8(00000000)            call printf
  1747                                  ;
  1748 00000754 4C89FB                  mov rbx, r15
  1749 00000757 4881E300030000          and rbx, tag4mask
  1750 0000075E 48C1EB08                shr rbx, 8
  1751 00000762 48BF-                   mov rdi, tag4bits9_8
  1751 00000764 [EF08000000000000] 
  1752 0000076C 4889DE                  mov rsi, rbx
  1753 0000076F B800000000              mov qword rax, 0
  1754 00000774 E8(00000000)            call printf
  1755                                  ;
  1756 00000779 4C89FB                  mov rbx, r15
  1757 0000077C 4881E3C0000000          and rbx, tag3mask
  1758 00000783 48C1EB06                shr rbx, 6
  1759 00000787 48BF-                   mov rdi, tag3bits7_6
  1759 00000789 [0509000000000000] 
  1760 00000791 4889DE                  mov rsi, rbx
  1761 00000794 B800000000              mov qword rax, 0
  1762 00000799 E8(00000000)            call printf
  1763                                  ;
  1764 0000079E 4C89FB                  mov rbx, r15
  1765 000007A1 4883E330                and rbx, tag2mask
  1766 000007A5 48C1EB04                shr rbx, 4
  1767 000007A9 48BF-                   mov rdi, tag2bits5_4
  1767 000007AB [1B09000000000000] 
  1768 000007B3 4889DE                  mov rsi, rbx
  1769 000007B6 B800000000              mov qword rax, 0
  1770 000007BB E8(00000000)            call printf
  1771                                  ;
  1772 000007C0 4C89FB                  mov rbx, r15
  1773 000007C3 4883E30C                and rbx, tag1mask
  1774 000007C7 48C1EB02                shr rbx, 2
  1775 000007CB 48BF-                   mov rdi, tag1bits3_2
  1775 000007CD [3109000000000000] 
  1776 000007D5 4889DE                  mov rsi, rbx
  1777 000007D8 B800000000              mov qword rax, 0
  1778 000007DD E8(00000000)            call printf
  1779                                  ;
  1780 000007E2 4C89FB                  mov rbx, r15
  1781 000007E5 4883E303                and rbx, tag0mask
  1782                                  ;No shifting of bits is necessary
  1783 000007E9 48BF-                   mov rdi, tag0bits1_0
  1783 000007EB [4709000000000000] 
  1784 000007F3 4889DE                  mov rsi, rbx
  1785 000007F6 B800000000              mov qword rax, 0
  1786 000007FB E8(00000000)            call printf
  1787                                  ;
  1788                                  ;===== Begin setup of tag word for use in displaying type of contents of each fpu register ===============================================
  1789                                  ;
  1790                                  ;Initial configuration of tag word
  1791                                  ;   -----------------------------------------
  1792                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  1793                                  ;   -----------------------------------------
  1794                                  ;and each tag component is 2 bits.
  1795                                  ;The contents of TOP (within the Status word) indicates which tag associates with st0.  For instance, suppose TOP contain 5, then tag5 
  1796                                  ;identifies with register st0 as in the following diagram:
  1797                                  ;   -----------------------------------------
  1798                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  1799                                  ;   -----------------------------------------
  1800                                  ;     st2  st1  st0  st7  st6  st5  st4  st3
  1801                                  ;
  1802                                  ;The next step will be to rotate the Tag word to the right in order to align the tags with registers in the order st7 st6 st5 st4 st3 st2 
  1803                                  ;st1 st0.  Then the diagram will be as follows:
  1804                                  ;   -----------------------------------------
  1805                                  ;   |tag7|tag6|tag5|tag4|tag3|tag2|tag1|tag0|
  1806                                  ;   -----------------------------------------
  1807                                  ;     st7  st6  st5  st4  st3  st2  st1  st0
  1808                                  ;Then tag number k is associated with fpu register k.
  1809                                  ;
  1810                                  ;First obtain a copy of the top pointer.
  1811 00000800 41BF00000000            mov qword r15, 0                                  ;Make sure r15 contains only zeros before placing the status word in r15.
  1812 00000806 66448B7C2404            mov word r15w, [rsp+4]                            ;Now the status word is in the lowest word of the 4-word register r15
  1813 0000080C 4981E700380000          and r15, tpmask                                   ;Zero out all bits of status word except bits #13, 12, and 11
  1814 00000813 49C1EF0B                shr r15, 11                                       ;Shift bits 13, 12 and 11 to positions 2, 1, and 0.  
  1815                                  ;                                                 ;Now r15 contains only the top pointer.
  1816                                  ;
  1817                                  ;Obtain a copy of the Tag word.
  1818 00000817 41BE00000000            mov qword r14, 0
  1819 0000081D 66448B742408            mov word r14w, [rsp+8]                            ;The tag word is now in the lowest 2 bytes of r14.
  1820 00000823 4981E6FFFF0000          and r14, 000000000000ffffh                        ;Make sure the upper 6 bytes are all zeros.
  1821                                  ;
  1822                                  ;Now rotate the Tag word by 2*Top many bits.  The syntax requires that we use a loop rotating by 2 bits with each iteration of the loop.
  1823                                  beginrotateloop:                                  ;Assembly version of a while loop; test stop condition before loop iterates.
  1824 0000082A 4983FF00                     cmp qword r15, 0                             ;Compare: is r15 == 0?
  1825 0000082E 740D                         je  exitrotateloop                           ;If r15 is 0 then the loop has finished.
  1826 00000830 6641D1CE                     ror r14w, 1                                  ;Rotate right 1 bit
  1827 00000834 6641D1CE                     ror r14w, 1                                  ;Rotate right 1 more bit.  Do it twice because tag cells hold two bits.
  1828 00000838 49FFCF                       dec r15                                      ;r15 = r15 - 1
  1829 0000083B EBED                    jmp beginrotateloop
  1830                                  exitrotateloop:
  1831                                  ;
  1832                                  ;
  1833                                  ;
  1834                                  ;===== Begin section that outputs the contents of each FPU register =======================================================================
  1835                                  
  1836                                  ;Display headings over each column.  Column 1 = identifier of register; Column 2 = contents of register; Column 3 = tag value
  1837 0000083D 48BF-                   mov qword rdi, stringformat                       ;First parameter receives the standard string format 
  1837 0000083F [2F02000000000000] 
  1838 00000847 48BE-                   mov qword rsi, columnheadings                     ;Second parameter receives the string to be printed
  1838 00000849 [3202000000000000] 
  1839 00000851 B800000000              mov qword rax, 0                                  ;No fp values will be outputted
  1840 00000856 E8(00000000)            call printf
  1841                                  
  1842                                  ;Begin section to output st7
  1843 0000085B 48BF-                   mov qword rdi, st7format                          ;Set the format for st7
  1843 0000085D [5602000000000000] 
  1844 00000865 488B74246A              mov qword rsi, [rsp+106]                          ;Copy the first 2 bytes of the number to the 2nd parameter
  1845 0000086A 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  1846 00000871 488B542462              mov qword rdx, [rsp+98]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  1847                                  ;The tag cell for st7 is in bits 15 and 14 of the tag word r14.  We need that number to classify the data in st7.
  1848 00000876 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  1849 00000879 4881E300C00000          and rbx, tag7mask                                 ;Make sure all bits other than bits 14 and 15 are zeros
  1850 00000880 48C1EB0E                shr rbx, 14                                       ;Shift the bit in position 14 to position 0
  1851                                  ;
  1852                                  ;A case statement will be used to evaluate the contents of rbx.
  1853                                  st7_case0:
  1854 00000884 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  1855 00000888 750C                        jne st7_case1                                 ;Jump to case 1 if this is not case 0.
  1856 0000088A 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  1856 0000088C [3203000000000000] 
  1857 00000894 EB2E                        jmp st7_endcase                               ;Exit from the entire case statement
  1858                                  st7_case1:
  1859 00000896 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  1860 0000089A 750C                        jne st7_case2                                 ;Jump to case 2 if this is not case 1.
  1861 0000089C 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  1861 0000089E [3F03000000000000] 
  1862 000008A6 EB1C                        jmp st7_endcase                               ;Exit from the entire case statement
  1863                                  st7_case2:
  1864 000008A8 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  1865 000008AC 750C                        jne st7_case3                                 ;Jump to case 3 if this is not case 2.
  1866 000008AE 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  1866 000008B0 [4B03000000000000] 
  1867 000008B8 EB0A                        jmp st7_endcase                               ;Exit from the entire case statement
  1868                                  st7_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  1869 000008BA 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  1869 000008BC [1E03000000000000] 
  1870                                  st7_endcase:                                      ;End of the case statement
  1871                                  ;
  1872 000008C4 B800000000              mov qword rax, 0                              
  1873 000008C9 E8(00000000)            call printf
  1874                                  ;End of section to output st7
  1875                                  ;
  1876                                  ;
  1877                                  ;Begin section to output st6
  1878 000008CE 48BF-                   mov qword rdi, st6format                          ;Set the format for st6
  1878 000008D0 [6F02000000000000] 
  1879 000008D8 488B742460              mov qword rsi, [rsp+96]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  1880 000008DD 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  1881 000008E4 488B542458              mov qword rdx, [rsp+88]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  1882                                  ;The tag cell for st6 is in bits 13 and 12 of the tag word r14.  We need that number to classify the data in st6.
  1883 000008E9 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  1884 000008EC 4881E300300000          and rbx, tag6mask                                 ;Make sure all bits other than bits 13 and 12 are zeros
  1885 000008F3 48C1EB0C                shr rbx, 12                                       ;Shift the bit in position 12 to position 0
  1886                                  ;
  1887                                  ;A case statement will be used to evaluate the contents of rbx.
  1888                                  st6_case0:
  1889 000008F7 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  1890 000008FB 750C                        jne st6_case1                                 ;Jump to case 1 if this is not case 0.
  1891 000008FD 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  1891 000008FF [3203000000000000] 
  1892 00000907 EB2E                        jmp st6_endcase                               ;Exit from the entire case statement
  1893                                  st6_case1:
  1894 00000909 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  1895 0000090D 750C                        jne st6_case2                                 ;Jump to case 2 if this is not case 1.
  1896 0000090F 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  1896 00000911 [3F03000000000000] 
  1897 00000919 EB1C                        jmp st6_endcase                               ;Exit from the entire case statement
  1898                                  st6_case2:
  1899 0000091B 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  1900 0000091F 750C                        jne st6_case3                                 ;Jump to case 3 if this is not case 2.
  1901 00000921 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  1901 00000923 [4B03000000000000] 
  1902 0000092B EB0A                        jmp st6_endcase                               ;Exit from the entire case statement
  1903                                  st6_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  1904 0000092D 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  1904 0000092F [1E03000000000000] 
  1905                                  st6_endcase:                                      ;End of the case statement
  1906                                  ;
  1907 00000937 B800000000              mov qword rax, 0                              
  1908 0000093C E8(00000000)            call printf
  1909                                  ;End of section to output st6
  1910                                  ;
  1911                                  ;
  1912                                  ;Begin section to output st5
  1913 00000941 48BF-                   mov qword rdi, st5format                          ;Set the format for st5
  1913 00000943 [8802000000000000] 
  1914 0000094B 488B742456              mov qword rsi, [rsp+86]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  1915 00000950 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  1916 00000957 488B54244E              mov qword rdx, [rsp+78]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  1917                                  ;The tag cell for st5 is in bits 11 and 10 of the tag word r14.  We need that number to classify the data in st5.
  1918 0000095C 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  1919 0000095F 4881E3000C0000          and rbx, tag5mask                                 ;Make sure all bits other than bits 11 and 10 are zeros
  1920 00000966 48C1EB0A                shr rbx, 10                                       ;Shift the bit in position 10 to position 0
  1921                                  ;
  1922                                  ;A case statement will be used to evaluate the contents of rbx.
  1923                                  st5_case0:
  1924 0000096A 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  1925 0000096E 750C                        jne st5_case1                                 ;Jump to case 1 if this is not case 0.
  1926 00000970 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  1926 00000972 [3203000000000000] 
  1927 0000097A EB2E                        jmp st5_endcase                               ;Exit from the entire case statement
  1928                                  st5_case1:
  1929 0000097C 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  1930 00000980 750C                        jne st5_case2                                 ;Jump to case 2 if this is not case 1.
  1931 00000982 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  1931 00000984 [3F03000000000000] 
  1932 0000098C EB1C                        jmp st5_endcase                               ;Exit from the entire case statement
  1933                                  st5_case2:
  1934 0000098E 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  1935 00000992 750C                        jne st5_case3                                 ;Jump to case 3 if this is not case 2.
  1936 00000994 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  1936 00000996 [4B03000000000000] 
  1937 0000099E EB0A                        jmp st5_endcase                               ;Exit from the entire case statement
  1938                                  st5_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  1939 000009A0 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  1939 000009A2 [1E03000000000000] 
  1940                                  st5_endcase:                                      ;End of the case statement
  1941                                  ;
  1942 000009AA B800000000              mov qword rax, 0                              
  1943 000009AF E8(00000000)            call printf
  1944                                  ;End of section to output st5
  1945                                  ;
  1946                                  ;
  1947                                  ;Begin section to output st4
  1948 000009B4 48BF-                   mov qword rdi, st4format                          ;Set the format for st4
  1948 000009B6 [A102000000000000] 
  1949 000009BE 488B74244C              mov qword rsi, [rsp+76]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  1950 000009C3 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  1951 000009CA 488B542444              mov qword rdx, [rsp+68]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  1952                                  ;The tag cell for st4 is in bits 9 and 8 of the tag word r14.  We need that number to classify the data in st4.
  1953 000009CF 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  1954 000009D2 4881E300030000          and rbx, tag4mask                                 ;Make sure all bits other than bits 9 and 8 are zeros
  1955 000009D9 48C1EB08                shr rbx, 8                                       ;Shift the bit in position 8 to position 0
  1956                                  ;
  1957                                  ;A case statement will be used to evaluate the contents of rbx.
  1958                                  st4_case0:
  1959 000009DD 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  1960 000009E1 750C                        jne st4_case1                                 ;Jump to case 1 if this is not case 0.
  1961 000009E3 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  1961 000009E5 [3203000000000000] 
  1962 000009ED EB2E                        jmp st4_endcase                               ;Exit from the entire case statement
  1963                                  st4_case1:
  1964 000009EF 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  1965 000009F3 750C                        jne st4_case2                                 ;Jump to case 2 if this is not case 1.
  1966 000009F5 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  1966 000009F7 [3F03000000000000] 
  1967 000009FF EB1C                        jmp st4_endcase                               ;Exit from the entire case statement
  1968                                  st4_case2:
  1969 00000A01 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  1970 00000A05 750C                        jne st4_case3                                 ;Jump to case 3 if this is not case 2.
  1971 00000A07 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  1971 00000A09 [4B03000000000000] 
  1972 00000A11 EB0A                        jmp st4_endcase                               ;Exit from the entire case statement
  1973                                  st4_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  1974 00000A13 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  1974 00000A15 [1E03000000000000] 
  1975                                  st4_endcase:                                      ;End of the case statement
  1976                                  ;
  1977 00000A1D B800000000              mov qword rax, 0                              
  1978 00000A22 E8(00000000)            call printf
  1979                                  ;End of section to output st4
  1980                                  ;
  1981                                  ;
  1982                                  ;Begin section to output st3
  1983 00000A27 48BF-                   mov qword rdi, st3format                          ;Set the format for st3
  1983 00000A29 [BA02000000000000] 
  1984 00000A31 488B742442              mov qword rsi, [rsp+66]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  1985 00000A36 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  1986 00000A3D 488B54243A              mov qword rdx, [rsp+58]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  1987                                  ;The tag cell for st3 is in bits 7 and 6 of the tag word r14.  We need that number to classify the data in st3.
  1988 00000A42 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  1989 00000A45 4881E3C0000000          and rbx, tag3mask                                 ;Make sure all bits other than bits 9 and 8 are zeros
  1990 00000A4C 48C1EB06                shr rbx, 6                                       ;Shift the bit in position 6 to position 0
  1991                                  ;
  1992                                  ;A case statement will be used to evaluate the contents of rbx.
  1993                                  st3_case0:
  1994 00000A50 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  1995 00000A54 750C                        jne st3_case1                                 ;Jump to case 1 if this is not case 0.
  1996 00000A56 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  1996 00000A58 [3203000000000000] 
  1997 00000A60 EB2E                        jmp st3_endcase                               ;Exit from the entire case statement
  1998                                  st3_case1:
  1999 00000A62 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2000 00000A66 750C                        jne st3_case2                                 ;Jump to case 2 if this is not case 1.
  2001 00000A68 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2001 00000A6A [3F03000000000000] 
  2002 00000A72 EB1C                        jmp st3_endcase                               ;Exit from the entire case statement
  2003                                  st3_case2:
  2004 00000A74 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2005 00000A78 750C                        jne st3_case3                                 ;Jump to case 3 if this is not case 2.
  2006 00000A7A 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2006 00000A7C [4B03000000000000] 
  2007 00000A84 EB0A                        jmp st3_endcase                               ;Exit from the entire case statement
  2008                                  st3_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2009 00000A86 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2009 00000A88 [1E03000000000000] 
  2010                                  st3_endcase:                                      ;End of the case statement
  2011                                  ;
  2012 00000A90 B800000000              mov qword rax, 0                              
  2013 00000A95 E8(00000000)            call printf
  2014                                  ;End of section to output st3
  2015                                  ;
  2016                                  ;
  2017                                  ;Begin section to output st2
  2018 00000A9A 48BF-                   mov qword rdi, st2format                          ;Set the format for st2
  2018 00000A9C [D302000000000000] 
  2019 00000AA4 488B742438              mov qword rsi, [rsp+56]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2020 00000AA9 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2021 00000AB0 488B542430              mov qword rdx, [rsp+48]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2022                                  ;The tag cell for st2 is in bits 5 and 4 of the tag word r14.  We need that number to classify the data in st2.
  2023 00000AB5 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2024 00000AB8 4883E330                and rbx, tag2mask                                 ;Make sure all bits other than bits 5 and 4 are zeros
  2025 00000ABC 48C1EB04                shr rbx, 4                                        ;Shift the bit in position 4 to position 0
  2026                                  ;
  2027                                  ;A case statement will be used to evaluate the contents of rbx.
  2028                                  st2_case0:
  2029 00000AC0 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2030 00000AC4 750C                        jne st2_case1                                 ;Jump to case 1 if this is not case 0.
  2031 00000AC6 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2031 00000AC8 [3203000000000000] 
  2032 00000AD0 EB2E                        jmp st2_endcase                               ;Exit from the entire case statement
  2033                                  st2_case1:
  2034 00000AD2 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2035 00000AD6 750C                        jne st2_case2                                 ;Jump to case 2 if this is not case 1.
  2036 00000AD8 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2036 00000ADA [3F03000000000000] 
  2037 00000AE2 EB1C                        jmp st2_endcase                               ;Exit from the entire case statement
  2038                                  st2_case2:
  2039 00000AE4 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2040 00000AE8 750C                        jne st2_case3                                 ;Jump to case 3 if this is not case 2.
  2041 00000AEA 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2041 00000AEC [4B03000000000000] 
  2042 00000AF4 EB0A                        jmp st2_endcase                               ;Exit from the entire case statement
  2043                                  st2_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2044 00000AF6 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2044 00000AF8 [1E03000000000000] 
  2045                                  st2_endcase:                                      ;End of the case statement
  2046                                  ;
  2047 00000B00 B800000000              mov qword rax, 0                              
  2048 00000B05 E8(00000000)            call printf
  2049                                  ;End of section to output st2
  2050                                  ;
  2051                                  ;
  2052                                  ;Begin section to output st1
  2053 00000B0A 48BF-                   mov qword rdi, st1format                          ;Set the format for st1
  2053 00000B0C [EC02000000000000] 
  2054 00000B14 488B74242E              mov qword rsi, [rsp+46]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2055 00000B19 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2056 00000B20 488B542426              mov qword rdx, [rsp+38]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2057                                  ;The tag cell for st1 is in bits 3 and 2 of the tag word r14.  We need that number to classify the data in st1.
  2058 00000B25 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2059 00000B28 4883E30C                and rbx, tag1mask                                 ;Make sure all bits other than bits 3 and 2 are zeros
  2060 00000B2C 48C1EB02                shr rbx, 2                                        ;Shift the bit in position 2 to position 0
  2061                                  ;
  2062                                  ;A case statement will be used to evaluate the contents of rbx.
  2063                                  st1_case0:
  2064 00000B30 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2065 00000B34 750C                        jne st1_case1                                 ;Jump to case 1 if this is not case 0.
  2066 00000B36 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2066 00000B38 [3203000000000000] 
  2067 00000B40 EB2E                        jmp st1_endcase                               ;Exit from the entire case statement
  2068                                  st1_case1:
  2069 00000B42 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2070 00000B46 750C                        jne st1_case2                                 ;Jump to case 2 if this is not case 1.
  2071 00000B48 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2071 00000B4A [3F03000000000000] 
  2072 00000B52 EB1C                        jmp st1_endcase                               ;Exit from the entire case statement
  2073                                  st1_case2:
  2074 00000B54 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2075 00000B58 750C                        jne st1_case3                                 ;Jump to case 3 if this is not case 2.
  2076 00000B5A 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2076 00000B5C [4B03000000000000] 
  2077 00000B64 EB0A                        jmp st1_endcase                               ;Exit from the entire case statement
  2078                                  st1_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2079 00000B66 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2079 00000B68 [1E03000000000000] 
  2080                                  st1_endcase:                                      ;End of the case statement
  2081                                  ;
  2082 00000B70 B800000000              mov qword rax, 0                                  ;No fp values will be passed to parameters
  2083 00000B75 E8(00000000)            call printf
  2084                                  ;End of section to output st1
  2085                                  ;
  2086                                  ;
  2087                                  ;Begin section to output st0
  2088 00000B7A 48BF-                   mov qword rdi, st0format                          ;Set the format for st0
  2088 00000B7C [0503000000000000] 
  2089 00000B84 488B742424              mov qword rsi, [rsp+36]                           ;Copy the first 2 bytes of the number to the 2nd parameter
  2090 00000B89 4881E6FFFF0000          and rsi, 000000000000ffffh                        ;Make sure the 6 bytes of the high end are zeros
  2091 00000B90 488B54241C              mov qword rdx, [rsp+28]                           ;Copy the last 8 bytes of the number to the 3rd parameter
  2092                                  
  2093                                  ;The tag cell for st0 is in bits 1 and 0 of the tag word r14.  We need that number to classify the data in st7.
  2094 00000B95 4C89F3                  mov rbx, r14                                      ;Place a copy of the tag word into rbx
  2095 00000B98 4883E303                and rbx, tag0mask                                 ;Make sure all bits other than bits 1 and 0 are zeros
  2096                                  ;
  2097                                  ;A case statement will be used to evaluate the contents of rbx.
  2098                                  st0_case0:
  2099 00000B9C 4883FB00                    cmp rbx, 0                                    ;Check for case 0
  2100 00000BA0 750C                        jne st0_case1                                 ;Jump to case 1 if this is not case 0.
  2101 00000BA2 48B9-                       mov rcx, validnumber                          ;Copy the address of the classifying label to the 4th parameter.
  2101 00000BA4 [3203000000000000] 
  2102 00000BAC EB2E                        jmp st0_endcase                               ;Exit from the entire case statement
  2103                                  st0_case1:
  2104 00000BAE 4883FB01                    cmp rbx, 1                                    ;Check for case 1
  2105 00000BB2 750C                        jne st0_case2                                 ;Jump to case 2 if this is not case 1.
  2106 00000BB4 48B9-                       mov rcx, floatingpointzero                    ;Copy the address of the classifying label to the 4th parameter.
  2106 00000BB6 [3F03000000000000] 
  2107 00000BBE EB1C                        jmp st0_endcase                               ;Exit from the entire case statement
  2108                                  st0_case2:
  2109 00000BC0 4883FB02                    cmp rbx, 2                                    ;Check for case 2
  2110 00000BC4 750C                        jne st0_case3                                 ;Jump to case 2 if this is not case 1.
  2111 00000BC6 48B9-                       mov rcx, specialnumber                        ;Copy the address of the classifying label to the 4th parameter.
  2111 00000BC8 [4B03000000000000] 
  2112 00000BD0 EB0A                        jmp st0_endcase                               ;Exit from the entire case statement
  2113                                  st0_case3: ;default case -- if the numeric value in rbx is not (0 or 1 or 2) then it must be 3.
  2114 00000BD2 48B9-                       mov rcx, emptyspace                           ;Copy the address of the classifying tag to the 4th parameter.
  2114 00000BD4 [1E03000000000000] 
  2115                                  st0_endcase:                                      ;End of the case statement
  2116                                  ;
  2117 00000BDC B800000000              mov qword rax, 0                                  ;No fp values will be passed to parameters.
  2118 00000BE1 E8(00000000)            call printf
  2119                                  ;End of section to output st0
  2120                                  
  2121                                  ;===============================
  2122                                  ;End of showing FPU registers  |
  2123                                  ;===============================
  2124                                  ;
  2125                                  ;===== Final message ====================================================================================================================== 
  2126                                  ;
  2127 00000BE6 48BF-                   mov qword rdi, stringformat                                 ;"%s"
  2127 00000BE8 [2F02000000000000] 
  2128 00000BF0 48BE-                   mov qword rsi, farewell                                     ;"End of FPU87 stack dump"
  2128 00000BF2 [5D09000000000000] 
  2129 00000BFA B800000000              mov qword rax, 0                                            ;Do not use any data from SSE
  2130 00000BFF E8(00000000)            call printf                                                 ;Standard library function handles the output
  2131                                  ;
  2132                                  ;Dr Carter's program restores all the data in the FPU from memory.  Therefore, we do it here also. 
  2133                                  ;Think of the frstor instruction as the reverse of the fsave instruction; it restores all the fpu registers from the system stack.  
  2134                                  ;Scan the source code above belonging to the function showfpusubprogram and notice that between the fsave instruction and the frstor 
  2135                                  ;instruction below the system stack is never modified.  Therefore, it should be safe to apply the frstor instruction.
  2136                                  ;
  2137 00000C04 DD2424                  frstor [rsp]   ;Hopefully rsp has not changed since the fsave instruction was executed earlier.
  2138                                  ;
  2139                                  ;===== Time to clean up and return to the caller ==========================================================================================
  2140                                  ;This program is preparing to terminate.  It is time to reverse those earlier pushes.
  2141                                  
  2142                                  ;First do 14 pops and discard any data.  Undoubtedly Dr Carter has a more sophisticated way to accomplish the same result.
  2143 00000C07 58                      pop rax  ;pop #1
  2144 00000C08 58                      pop rax  ;pop #2
  2145 00000C09 58                      pop rax  ;pop #3
  2146 00000C0A 58                      pop rax  ;pop #4
  2147 00000C0B 58                      pop rax  ;pop #5
  2148 00000C0C 58                      pop rax  ;pop #6
  2149 00000C0D 58                      pop rax  ;pop #7
  2150 00000C0E 58                      pop rax  ;pop #8
  2151 00000C0F 58                      pop rax  ;pop #9
  2152 00000C10 58                      pop rax  ;pop #10
  2153 00000C11 58                      pop rax  ;pop #11
  2154 00000C12 58                      pop rax  ;pop #12
  2155 00000C13 58                      pop rax  ;pop #13
  2156 00000C14 58                      pop rax  ;pop #14
  2157                                  ;
  2158                                  ;Restore orginal values to the integer registers
  2159 00000C15 9D                      popf                                                        ;Restore rflags
  2160 00000C16 5B                      pop rbx                                                     ;Restore rbx
  2161 00000C17 415F                    pop r15                                                     ;Restore r15
  2162 00000C19 415E                    pop r14                                                     ;Restore r14
  2163 00000C1B 415D                    pop r13                                                     ;Restore r13
  2164 00000C1D 415C                    pop r12                                                     ;Restore r12
  2165 00000C1F 415B                    pop r11                                                     ;Restore r11
  2166 00000C21 415A                    pop r10                                                     ;Restore r10
  2167 00000C23 4159                    pop r9                                                      ;Restore r9
  2168 00000C25 4158                    pop r8                                                      ;Restore r8
  2169 00000C27 59                      pop rcx                                                     ;Restore rcx
  2170 00000C28 5A                      pop rdx                                                     ;Restore rdx
  2171 00000C29 5E                      pop rsi                                                     ;Restore rsi
  2172 00000C2A 5F                      pop rdi                                                     ;Restore rdi
  2173 00000C2B 5D                      pop rbp                                                     ;Restore rbp
  2174                                  ;
  2175                                  ;
  2176                                  ;===== Return an integer value 0 to the caller ====================================================================================================
  2177                                  ;
  2178 00000C2C B800000000              mov qword rax, 0                                            ;Return value 0 indicates successful conclusion.
  2179 00000C31 C20800                  ret 8                                                       ;Return to the address on top of the stack and then discard one qword from the top of the stack.
  2180                                  ;End of showfpusubprogram 
  2181                                  ;========== End of showfpusubprogram ==============================================================================================================
  2182                                  ;
  2183                                  ;
  2184                                  ;==================================================================================================================================================
  2185                                  ;==================================================================================================================================================
  2186                                  ;                             Show XMM Registers Subprogram
  2187                                  ;==================================================================================================================================================
  2188                                  ;==================================================================================================================================================
  2189                                  
  2190                                  global showxmmsubprogram
  2191                                  
  2192                                  segment .data
  2193                                  
  2194 00000976 257300                  formatstring db "%s", 0
  2195 00000979 535345322044756D70-     formatdumpnumber db "SSE2 Dump # %ld", 10, 0
  2195 00000982 202320256C640A00   
  2196 0000098A 786D6D232320202020-     formatsseheader db "xmm##        high64              low64", 10, 0
  2196 00000993 202020206869676836-
  2196 0000099C 342020202020202020-
  2196 000009A5 2020202020206C6F77-
  2196 000009AE 36340A00           
  2197 000009B2 786D6D31353A202025-     formatxmm15 db     "xmm15:  %016lx    %016lx", 10, 0
  2197 000009BB 3031366C7820202020-
  2197 000009C4 253031366C780A00   
  2198 000009CC 786D6D31343A202025-     formatxmm14 db     "xmm14:  %016lx    %016lx", 10, 0
  2198 000009D5 3031366C7820202020-
  2198 000009DE 253031366C780A00   
  2199 000009E6 786D6D31333A202025-     formatxmm13 db     "xmm13:  %016lx    %016lx", 10, 0
  2199 000009EF 3031366C7820202020-
  2199 000009F8 253031366C780A00   
  2200 00000A00 786D6D31323A202025-     formatxmm12 db     "xmm12:  %016lx    %016lx", 10, 0
  2200 00000A09 3031366C7820202020-
  2200 00000A12 253031366C780A00   
  2201 00000A1A 786D6D31313A202025-     formatxmm11 db     "xmm11:  %016lx    %016lx", 10, 0
  2201 00000A23 3031366C7820202020-
  2201 00000A2C 253031366C780A00   
  2202 00000A34 786D6D31303A202025-     formatxmm10 db     "xmm10:  %016lx    %016lx", 10, 0
  2202 00000A3D 3031366C7820202020-
  2202 00000A46 253031366C780A00   
  2203 00000A4E 786D6D393A20202025-     formatxmm9  db     "xmm9:   %016lx    %016lx", 10, 0
  2203 00000A57 3031366C7820202020-
  2203 00000A60 253031366C780A00   
  2204 00000A68 786D6D383A20202025-     formatxmm8  db     "xmm8:   %016lx    %016lx", 10, 0
  2204 00000A71 3031366C7820202020-
  2204 00000A7A 253031366C780A00   
  2205 00000A82 786D6D373A20202025-     formatxmm7  db     "xmm7:   %016lx    %016lx", 10, 0
  2205 00000A8B 3031366C7820202020-
  2205 00000A94 253031366C780A00   
  2206 00000A9C 786D6D363A20202025-     formatxmm6  db     "xmm6:   %016lx    %016lx", 10, 0
  2206 00000AA5 3031366C7820202020-
  2206 00000AAE 253031366C780A00   
  2207 00000AB6 786D6D353A20202025-     formatxmm5  db     "xmm5:   %016lx    %016lx", 10, 0
  2207 00000ABF 3031366C7820202020-
  2207 00000AC8 253031366C780A00   
  2208 00000AD0 786D6D343A20202025-     formatxmm4  db     "xmm4:   %016lx    %016lx", 10, 0
  2208 00000AD9 3031366C7820202020-
  2208 00000AE2 253031366C780A00   
  2209 00000AEA 786D6D333A20202025-     formatxmm3  db     "xmm3:   %016lx    %016lx", 10, 0
  2209 00000AF3 3031366C7820202020-
  2209 00000AFC 253031366C780A00   
  2210 00000B04 786D6D323A20202025-     formatxmm2  db     "xmm2:   %016lx    %016lx", 10, 0
  2210 00000B0D 3031366C7820202020-
  2210 00000B16 253031366C780A00   
  2211 00000B1E 786D6D313A20202025-     formatxmm1  db     "xmm1:   %016lx    %016lx", 10, 0
  2211 00000B27 3031366C7820202020-
  2211 00000B30 253031366C780A00   
  2212 00000B38 786D6D303A20202025-     formatxmm0  db     "xmm0:   %016lx    %016lx", 10, 0
  2212 00000B41 3031366C7820202020-
  2212 00000B4A 253031366C780A00   
  2213                                  
  2214                                  segment .text
  2215                                  showxmmsubprogram:
  2216                                  
  2217                                  ;========== Create backups for integer registers ========================================================================================
  2218                                  ;Safe programming practice: save all the data that may possibly be modified within this subprogram.  Intentionally the registers rsp
  2219                                  ;and rax are not backed up.
  2220 00000C34 55                      push rbp                                                    ;Back up the very important base pointer register
  2221 00000C35 57                      push rdi                                                    ;Back up rdi
  2222 00000C36 56                      push rsi                                                    ;Back up rsi
  2223 00000C37 52                      push rdx                                                    ;Back up rdx
  2224 00000C38 51                      push rcx                                                    ;Back up rcx
  2225 00000C39 4150                    push r8                                                     ;Back up r8
  2226 00000C3B 4151                    push r9                                                     ;Back up r9
  2227 00000C3D 4152                    push r10                                                    ;Back up r10
  2228 00000C3F 4153                    push r11                                                    ;Back up r11
  2229 00000C41 4154                    push r12                                                    ;Back up r12
  2230 00000C43 4155                    push r13                                                    ;Back up r13
  2231 00000C45 4156                    push r14                                                    ;Back up r14
  2232 00000C47 4157                    push r15                                                    ;Back up r15
  2233 00000C49 53                      push rbx                                                    ;Back up rbx
  2234 00000C4A 9C                      pushf                                                       ;Back up rflags
  2235                                  
  2236                                  ;========== Copy all xmm values to the integer stack ====================================================================================
  2237 00000C4B 90<rept>                align 16
  2238 00000C50 6A00                    push qword 0
  2239 00000C52 6A00                    push qword 0
  2240 00000C54 66440F113C24            movupd     [rsp], xmm15
  2241 00000C5A 6A00                    push qword 0
  2242 00000C5C 6A00                    push qword 0
  2243 00000C5E 66440F113424            movupd     [rsp], xmm14
  2244 00000C64 6A00                    push qword 0
  2245 00000C66 6A00                    push qword 0
  2246 00000C68 66440F112C24            movupd     [rsp], xmm13
  2247 00000C6E 6A00                    push qword 0
  2248 00000C70 6A00                    push qword 0
  2249 00000C72 66440F112424            movupd     [rsp], xmm12
  2250 00000C78 6A00                    push qword 0
  2251 00000C7A 6A00                    push qword 0
  2252 00000C7C 66440F111C24            movupd     [rsp], xmm11
  2253 00000C82 6A00                    push qword 0
  2254 00000C84 6A00                    push qword 0
  2255 00000C86 66440F111424            movupd     [rsp], xmm10
  2256 00000C8C 6A00                    push qword 0
  2257 00000C8E 6A00                    push qword 0
  2258 00000C90 66440F110C24            movupd     [rsp], xmm9
  2259 00000C96 6A00                    push qword 0
  2260 00000C98 6A00                    push qword 0
  2261 00000C9A 66440F110424            movupd     [rsp], xmm8
  2262 00000CA0 6A00                    push qword 0
  2263 00000CA2 6A00                    push qword 0
  2264 00000CA4 660F113C24              movupd     [rsp], xmm7
  2265 00000CA9 6A00                    push qword 0
  2266 00000CAB 6A00                    push qword 0
  2267 00000CAD 660F113424              movupd     [rsp], xmm6
  2268 00000CB2 6A00                    push qword 0
  2269 00000CB4 6A00                    push qword 0
  2270 00000CB6 660F112C24              movupd     [rsp], xmm5
  2271 00000CBB 6A00                    push qword 0
  2272 00000CBD 6A00                    push qword 0
  2273 00000CBF 660F112424              movupd     [rsp], xmm4
  2274 00000CC4 6A00                    push qword 0
  2275 00000CC6 6A00                    push qword 0
  2276 00000CC8 660F111C24              movupd     [rsp], xmm3
  2277 00000CCD 6A00                    push qword 0
  2278 00000CCF 6A00                    push qword 0
  2279 00000CD1 660F111424              movupd     [rsp], xmm2
  2280 00000CD6 6A00                    push qword 0
  2281 00000CD8 6A00                    push qword 0
  2282 00000CDA 660F110C24              movupd     [rsp], xmm1
  2283 00000CDF 6A00                    push qword 0
  2284 00000CE1 6A00                    push qword 0
  2285 00000CE3 660F110424              movupd     [rsp], xmm0
  2286                                  ;========= End of copying xmm values to the integer stack =================================================================================
  2287                                  
  2288                                  ;========= Begin section that will display all the xmm values =============================================================================
  2289 00000CE8 90<rept>                align 16
  2290 00000CF0 B800000000              mov qword  rax, 0
  2291 00000CF5 48BF-                   mov        rdi, formatdumpnumber
  2291 00000CF7 [7909000000000000] 
  2292 00000CFF 488BB42480010000        mov        rsi, [rsp+48*8]
  2293 00000D07 E8(00000000)            call       printf
  2294 00000D0C B800000000              mov qword  rax, 0
  2295 00000D11 48BF-                   mov        rdi, formatstring                                ;"%s", 0
  2295 00000D13 [7609000000000000] 
  2296 00000D1B 48BE-                   mov        rsi, formatsseheader                             ;"xmm**    high64    low64"
  2296 00000D1D [8A09000000000000] 
  2297 00000D25 E8(00000000)            call       printf
  2298 00000D2A B800000000              mov qword  rax, 0
  2299 00000D2F 48BF-                   mov        rdi, formatxmm15
  2299 00000D31 [B209000000000000] 
  2300 00000D39 488BB424F8000000        mov        rsi, [rsp+31*8]
  2301 00000D41 488B9424F0000000        mov        rdx, [rsp+30*8]
  2302 00000D49 E8(00000000)            call       printf
  2303 00000D4E B800000000              mov qword  rax, 0
  2304 00000D53 48BF-                   mov        rdi, formatxmm14
  2304 00000D55 [CC09000000000000] 
  2305 00000D5D 488BB424E8000000        mov        rsi, [rsp+29*8]
  2306 00000D65 488B9424E0000000        mov        rdx, [rsp+28*8]
  2307 00000D6D E8(00000000)            call       printf
  2308 00000D72 B800000000              mov qword  rax, 0
  2309 00000D77 48BF-                   mov        rdi, formatxmm13
  2309 00000D79 [E609000000000000] 
  2310 00000D81 488BB424D8000000        mov        rsi, [rsp+27*8]
  2311 00000D89 488B9424D0000000        mov        rdx, [rsp+26*8]
  2312 00000D91 E8(00000000)            call       printf
  2313 00000D96 B800000000              mov qword  rax, 0
  2314 00000D9B 48BF-                   mov        rdi, formatxmm12
  2314 00000D9D [000A000000000000] 
  2315 00000DA5 488BB424C8000000        mov        rsi, [rsp+25*8]
  2316 00000DAD 488B9424C0000000        mov        rdx, [rsp+24*8]
  2317 00000DB5 E8(00000000)            call       printf
  2318 00000DBA B800000000              mov qword  rax, 0
  2319 00000DBF 48BF-                   mov        rdi, formatxmm11
  2319 00000DC1 [1A0A000000000000] 
  2320 00000DC9 488BB424B8000000        mov        rsi, [rsp+23*8]
  2321 00000DD1 488B9424B0000000        mov        rdx, [rsp+22*8]
  2322 00000DD9 E8(00000000)            call       printf
  2323 00000DDE B800000000              mov qword  rax, 0
  2324 00000DE3 48BF-                   mov        rdi, formatxmm10
  2324 00000DE5 [340A000000000000] 
  2325 00000DED 488BB424A8000000        mov        rsi, [rsp+21*8]
  2326 00000DF5 488B9424A0000000        mov        rdx, [rsp+20*8]
  2327 00000DFD E8(00000000)            call       printf
  2328 00000E02 B800000000              mov qword  rax, 0
  2329 00000E07 48BF-                   mov        rdi, formatxmm9
  2329 00000E09 [4E0A000000000000] 
  2330 00000E11 488BB42498000000        mov        rsi, [rsp+19*8]
  2331 00000E19 488B942490000000        mov        rdx, [rsp+18*8]
  2332 00000E21 E8(00000000)            call       printf
  2333 00000E26 B800000000              mov qword  rax, 0
  2334 00000E2B 48BF-                   mov        rdi, formatxmm8
  2334 00000E2D [680A000000000000] 
  2335 00000E35 488BB42488000000        mov        rsi, [rsp+17*8]
  2336 00000E3D 488B942480000000        mov        rdx, [rsp+16*8]
  2337 00000E45 E8(00000000)            call       printf
  2338 00000E4A B800000000              mov qword  rax, 0
  2339 00000E4F 48BF-                   mov        rdi, formatxmm7
  2339 00000E51 [820A000000000000] 
  2340 00000E59 488B742478              mov        rsi, [rsp+15*8]
  2341 00000E5E 488B542470              mov        rdx, [rsp+14*8]
  2342 00000E63 E8(00000000)            call       printf
  2343 00000E68 B800000000              mov qword  rax, 0
  2344 00000E6D 48BF-                   mov        rdi, formatxmm6
  2344 00000E6F [9C0A000000000000] 
  2345 00000E77 488B742468              mov        rsi, [rsp+13*8]
  2346 00000E7C 488B542460              mov        rdx, [rsp+12*8]
  2347 00000E81 E8(00000000)            call       printf
  2348 00000E86 B800000000              mov qword  rax, 0
  2349 00000E8B 48BF-                   mov        rdi, formatxmm5
  2349 00000E8D [B60A000000000000] 
  2350 00000E95 488B742458              mov        rsi, [rsp+11*8]
  2351 00000E9A 488B542450              mov        rdx, [rsp+10*8]
  2352 00000E9F E8(00000000)            call       printf
  2353 00000EA4 B800000000              mov qword  rax, 0
  2354 00000EA9 48BF-                   mov        rdi, formatxmm4
  2354 00000EAB [D00A000000000000] 
  2355 00000EB3 488B742448              mov        rsi, [rsp+9*8]
  2356 00000EB8 488B542440              mov        rdx, [rsp+8*8]
  2357 00000EBD E8(00000000)            call       printf
  2358 00000EC2 B800000000              mov qword  rax, 0
  2359 00000EC7 48BF-                   mov        rdi, formatxmm3
  2359 00000EC9 [EA0A000000000000] 
  2360 00000ED1 488B742438              mov        rsi, [rsp+7*8]
  2361 00000ED6 488B542430              mov        rdx, [rsp+6*8]
  2362 00000EDB E8(00000000)            call       printf
  2363 00000EE0 B800000000              mov qword  rax, 0
  2364 00000EE5 48BF-                   mov        rdi, formatxmm2
  2364 00000EE7 [040B000000000000] 
  2365 00000EEF 488B742428              mov        rsi, [rsp+5*8]
  2366 00000EF4 488B542420              mov        rdx, [rsp+4*8]
  2367 00000EF9 E8(00000000)            call       printf
  2368 00000EFE B800000000              mov qword  rax, 0
  2369 00000F03 48BF-                   mov        rdi, formatxmm1
  2369 00000F05 [1E0B000000000000] 
  2370 00000F0D 488B742418              mov        rsi, [rsp+3*8]
  2371 00000F12 488B542410              mov        rdx, [rsp+2*8]
  2372 00000F17 E8(00000000)            call       printf
  2373 00000F1C B800000000              mov qword  rax, 0
  2374 00000F21 48BF-                   mov        rdi, formatxmm0
  2374 00000F23 [380B000000000000] 
  2375 00000F2B 488B742408              mov        rsi, [rsp+1*8]
  2376 00000F30 488B1424                mov        rdx, [rsp+0*8]
  2377 00000F34 E8(00000000)            call       printf
  2378                                  
  2379                                  ;========== Restore all the data to the SEE2 registers ===================================================================================
  2380                                  
  2381 00000F39 66440F10BC24F00000-     movupd     xmm15, [rsp+30*8]
  2381 00000F42 00                 
  2382 00000F43 66440F10B424E00000-     movupd     xmm14, [rsp+28*8]
  2382 00000F4C 00                 
  2383 00000F4D 66440F10AC24D00000-     movupd     xmm13, [rsp+26*8]
  2383 00000F56 00                 
  2384 00000F57 66440F10A424C00000-     movupd     xmm12, [rsp+24*8]
  2384 00000F60 00                 
  2385 00000F61 66440F109C24B00000-     movupd     xmm11, [rsp+22*8]
  2385 00000F6A 00                 
  2386 00000F6B 66440F109424A00000-     movupd     xmm10, [rsp+20*8]
  2386 00000F74 00                 
  2387 00000F75 66440F108C24900000-     movupd     xmm9,  [rsp+18*8]
  2387 00000F7E 00                 
  2388 00000F7F 66440F108424800000-     movupd     xmm8,  [rsp+16*8]
  2388 00000F88 00                 
  2389 00000F89 660F107C2470            movupd     xmm7,  [rsp+14*8]
  2390 00000F8F 660F10742460            movupd     xmm6,  [rsp+12*8]
  2391 00000F95 660F106C2450            movupd     xmm5,  [rsp+10*8]
  2392 00000F9B 660F10642440            movupd     xmm4,  [rsp+8*8]
  2393 00000FA1 660F105C2430            movupd     xmm3,  [rsp+6*8]
  2394 00000FA7 660F10542420            movupd     xmm2,  [rsp+4*8]
  2395 00000FAD 660F104C2410            movupd     xmm1,  [rsp+2*8]
  2396 00000FB3 660F100424              movupd     xmm0,  [rsp+0*8]
  2397                                  
  2398                                  ;========= Reverse the pushes that occurred in this subprogram ============================================================================
  2399 00000FB8 58                      pop rax                                                     ;#32
  2400 00000FB9 58                      pop rax                                                     ;#31
  2401 00000FBA 58                      pop rax                                                     ;#30
  2402 00000FBB 58                      pop rax                                                     ;#29
  2403 00000FBC 58                      pop rax                                                     ;#28
  2404 00000FBD 58                      pop rax                                                     ;#27
  2405 00000FBE 58                      pop rax                                                     ;#26
  2406 00000FBF 58                      pop rax                                                     ;#25
  2407 00000FC0 58                      pop rax                                                     ;#24
  2408 00000FC1 58                      pop rax                                                     ;#23
  2409 00000FC2 58                      pop rax                                                     ;#22
  2410 00000FC3 58                      pop rax                                                     ;#21
  2411 00000FC4 58                      pop rax                                                     ;#20
  2412 00000FC5 58                      pop rax                                                     ;#19
  2413 00000FC6 58                      pop rax                                                     ;#18
  2414 00000FC7 58                      pop rax                                                     ;#17
  2415 00000FC8 58                      pop rax                                                     ;#16
  2416 00000FC9 58                      pop rax                                                     ;#15
  2417 00000FCA 58                      pop rax                                                     ;#14
  2418 00000FCB 58                      pop rax                                                     ;#13
  2419 00000FCC 58                      pop rax                                                     ;#12
  2420 00000FCD 58                      pop rax                                                     ;#11
  2421 00000FCE 58                      pop rax                                                     ;#10
  2422 00000FCF 58                      pop rax                                                     ;#9
  2423 00000FD0 58                      pop rax                                                     ;#8
  2424 00000FD1 58                      pop rax                                                     ;#7
  2425 00000FD2 58                      pop rax                                                     ;#6
  2426 00000FD3 58                      pop rax                                                     ;#5
  2427 00000FD4 58                      pop rax                                                     ;#4
  2428 00000FD5 58                      pop rax                                                     ;#3
  2429 00000FD6 58                      pop rax                                                     ;#2
  2430 00000FD7 58                      pop rax                                                     ;#1
  2431                                  
  2432                                  ;=========== Restore the original values to the integer registers =========================================================================
  2433 00000FD8 9D                      popf                                                        ;Restore rflags
  2434 00000FD9 5B                      pop rbx                                                     ;Restore rbx
  2435 00000FDA 415F                    pop r15                                                     ;Restore r15
  2436 00000FDC 415E                    pop r14                                                     ;Restore r14
  2437 00000FDE 415D                    pop r13                                                     ;Restore r13
  2438 00000FE0 415C                    pop r12                                                     ;Restore r12
  2439 00000FE2 415B                    pop r11                                                     ;Restore r11
  2440 00000FE4 415A                    pop r10                                                     ;Restore r10
  2441 00000FE6 4159                    pop r9                                                      ;Restore r9
  2442 00000FE8 4158                    pop r8                                                      ;Restore r8
  2443 00000FEA 59                      pop rcx                                                     ;Restore rcx
  2444 00000FEB 5A                      pop rdx                                                     ;Restore rdx
  2445 00000FEC 5E                      pop rsi                                                     ;Restore rsi
  2446 00000FED 5F                      pop rdi                                                     ;Restore rdi
  2447 00000FEE 5D                      pop rbp                                                     ;Restore rbp
  2448                                  
  2449                                  ;========== Gently exit from this subprogram ==============================================================================================================================
  2450                                  
  2451 00000FEF B800000000              mov qword rax, 0                                            ;Return value 0 indicates successful conclusion.
  2452 00000FF4 C20800                  ret 8                                                       ;Return to the address on top of the stack and then discard one qword from the 
  2453                                  ;                                                           ;top of the stack.  The latter action is due to the '8' following the 'ret'.
  2454                                  
  2455                                  ;========== End of showxmmsubprogram ======================================================================================================================================
  2456                                  
  2457                                  
  2458                                  
  2459                                  
  2460                                  
  2461                                  ;===========================================================================================================================================================================
  2462                                  ;===========================================================================================================================================================================
  2463                                  ;                             Show YMM Registers Subprogram
  2464                                  ;===========================================================================================================================================================================
  2465                                  ;===========================================================================================================================================================================
  2466                                  ;
  2467                                  ;Author: Floyd Holliday
  2468                                  ;Author email: holliday@fullerton.edu or activeprofessor@yahoo.com
  2469                                  ;Subprogram name: showymmsubprogram
  2470                                  ;Language: X86
  2471                                  ;Syntax: Intel
  2472                                  ;Date begun: 2013-Nov-15
  2473                                  ;Dates modified: 2014-Jan-22, 2014-Mar-4, 2014-Jul-7
  2474                                  ;Purpose: Show the contents of all 16 ymm registers in the AVX and SSE components.
  2475                                  ;Strategy: First backup all of AVX and SSE using xsave
  2476                                  ;          Second copy all ymm data to the stack
  2477                                  ;          Third display on the standard output device the ymm data from the stack
  2478                                  ;          Fourth restore the original data to AVX and SSE using xrstor
  2479                                  ;Terminology: AVX is Advanced Vector Extensions (state component 2).  SSE is Streaming SIMD Extensions (state component 1).  SIMD is Single Instruction - Multiple Data.
  2480                                  ;The registers ymm span both AVX and SSE: the upper half of each ymm register is in AVX and the lower half is in SSE.
  2481                                  ;Format information:
  2482                                  ;   Page width: 172 columns
  2483                                  ;   Comments begin: column 61
  2484                                  ;   Optimal printing: Landscape, 7 point font, monospace, 8Â½x11 paper
  2485                                  
  2486                                  global showymmsubprogram
  2487                                  
  2488                                  extern printf
  2489                                  
  2490                                  segment .data
  2491                                  
  2492 00000B52 4156582044756D7020-     showymmsubprogram.aveheaderfirst db "AVX Dump # %ld", 10, 0
  2492 00000B5B 2320256C640A00     
  2493 00000B62 202020202020207C2D-     showymmsubprogram.aveheadersecond db "       |-----------------------------ymm registers---------------------------------|", 10, 0
  2493 00000B6B 2D2D2D2D2D2D2D2D2D-
  2493 00000B74 2D2D2D2D2D2D2D2D2D-
  2493 00000B7D 2D2D2D2D2D2D2D2D2D-
  2493 00000B86 2D796D6D2072656769-
  2493 00000B8F 73746572732D2D2D2D-
  2493 00000B98 2D2D2D2D2D2D2D2D2D-
  2493 00000BA1 2D2D2D2D2D2D2D2D2D-
  2493 00000BAA 2D2D2D2D2D2D2D2D2D-
  2493 00000BB3 2D2D7C0A00         
  2494 00000BB8 202020202020207C20-     showymmsubprogram.aveheaderthird  db "       |                                                                           |", 10, 0
  2494 00000BC1 202020202020202020-
  2494 00000BCA 202020202020202020-
  2494 00000BD3 202020202020202020-
  2494 00000BDC 202020202020202020-
  2494 00000BE5 202020202020202020-
  2494 00000BEE 202020202020202020-
  2494 00000BF7 202020202020202020-
  2494 00000C00 202020202020202020-
  2494 00000C09 20207C0A00         
  2495 00000C0E 202020202020207C2D-     showymmsubprogram.aveheaderfourth db "       |---------AVX Registers--------------|-----------SSE registers------------| |", 10, 0
  2495 00000C17 2D2D2D2D2D2D2D2D41-
  2495 00000C20 565820526567697374-
  2495 00000C29 6572732D2D2D2D2D2D-
  2495 00000C32 2D2D2D2D2D2D2D2D7C-
  2495 00000C3B 2D2D2D2D2D2D2D2D2D-
  2495 00000C44 2D2D53534520726567-
  2495 00000C4D 6973746572732D2D2D-
  2495 00000C56 2D2D2D2D2D2D2D2D2D-
  2495 00000C5F 7C207C0A00         
  2496 00000C64 202020202020207C20-     showymmsubprogram.aveheaderfifth  db "       |                                    |                                    | |", 10, 0
  2496 00000C6D 202020202020202020-
  2496 00000C76 202020202020202020-
  2496 00000C7F 202020202020202020-
  2496 00000C88 20202020202020207C-
  2496 00000C91 202020202020202020-
  2496 00000C9A 202020202020202020-
  2496 00000CA3 202020202020202020-
  2496 00000CAC 202020202020202020-
  2496 00000CB5 7C207C0A00         
  2497 00000CBA 796D6D31353A207C20-     showymmsubprogram.aveymm15        db "ymm15: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2497 00000CC3 253031366C78202025-
  2497 00000CCC 3031366C78207C2025-
  2497 00000CD5 3031366C7820202530-
  2497 00000CDE 31366C78207C207C0A-
  2497 00000CE7 00                 
  2498 00000CE8 796D6D31343A207C20-     showymmsubprogram.aveymm14        db "ymm14: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2498 00000CF1 253031366C78202025-
  2498 00000CFA 3031366C78207C2025-
  2498 00000D03 3031366C7820202530-
  2498 00000D0C 31366C78207C207C0A-
  2498 00000D15 00                 
  2499 00000D16 796D6D31333A207C20-     showymmsubprogram.aveymm13        db "ymm13: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2499 00000D1F 253031366C78202025-
  2499 00000D28 3031366C78207C2025-
  2499 00000D31 3031366C7820202530-
  2499 00000D3A 31366C78207C207C0A-
  2499 00000D43 00                 
  2500 00000D44 796D6D31323A207C20-     showymmsubprogram.aveymm12        db "ymm12: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2500 00000D4D 253031366C78202025-
  2500 00000D56 3031366C78207C2025-
  2500 00000D5F 3031366C7820202530-
  2500 00000D68 31366C78207C207C0A-
  2500 00000D71 00                 
  2501 00000D72 796D6D31313A207C20-     showymmsubprogram.aveymm11        db "ymm11: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2501 00000D7B 253031366C78202025-
  2501 00000D84 3031366C78207C2025-
  2501 00000D8D 3031366C7820202530-
  2501 00000D96 31366C78207C207C0A-
  2501 00000D9F 00                 
  2502 00000DA0 796D6D31303A207C20-     showymmsubprogram.aveymm10        db "ymm10: | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2502 00000DA9 253031366C78202025-
  2502 00000DB2 3031366C78207C2025-
  2502 00000DBB 3031366C7820202530-
  2502 00000DC4 31366C78207C207C0A-
  2502 00000DCD 00                 
  2503 00000DCE 796D6D393A20207C20-     showymmsubprogram.aveymm9         db "ymm9:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2503 00000DD7 253031366C78202025-
  2503 00000DE0 3031366C78207C2025-
  2503 00000DE9 3031366C7820202530-
  2503 00000DF2 31366C78207C207C0A-
  2503 00000DFB 00                 
  2504 00000DFC 796D6D383A20207C20-     showymmsubprogram.aveymm8         db "ymm8:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2504 00000E05 253031366C78202025-
  2504 00000E0E 3031366C78207C2025-
  2504 00000E17 3031366C7820202530-
  2504 00000E20 31366C78207C207C0A-
  2504 00000E29 00                 
  2505 00000E2A 796D6D373A20207C20-     showymmsubprogram.aveymm7         db "ymm7:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2505 00000E33 253031366C78202025-
  2505 00000E3C 3031366C78207C2025-
  2505 00000E45 3031366C7820202530-
  2505 00000E4E 31366C78207C207C0A-
  2505 00000E57 00                 
  2506 00000E58 796D6D363A20207C20-     showymmsubprogram.aveymm6         db "ymm6:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2506 00000E61 253031366C78202025-
  2506 00000E6A 3031366C78207C2025-
  2506 00000E73 3031366C7820202530-
  2506 00000E7C 31366C78207C207C0A-
  2506 00000E85 00                 
  2507 00000E86 796D6D353A20207C20-     showymmsubprogram.aveymm5         db "ymm5:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2507 00000E8F 253031366C78202025-
  2507 00000E98 3031366C78207C2025-
  2507 00000EA1 3031366C7820202530-
  2507 00000EAA 31366C78207C207C0A-
  2507 00000EB3 00                 
  2508 00000EB4 796D6D343A20207C20-     showymmsubprogram.aveymm4         db "ymm4:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2508 00000EBD 253031366C78202025-
  2508 00000EC6 3031366C78207C2025-
  2508 00000ECF 3031366C7820202530-
  2508 00000ED8 31366C78207C207C0A-
  2508 00000EE1 00                 
  2509 00000EE2 796D6D333A20207C20-     showymmsubprogram.aveymm3         db "ymm3:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2509 00000EEB 253031366C78202025-
  2509 00000EF4 3031366C78207C2025-
  2509 00000EFD 3031366C7820202530-
  2509 00000F06 31366C78207C207C0A-
  2509 00000F0F 00                 
  2510 00000F10 796D6D323A20207C20-     showymmsubprogram.aveymm2         db "ymm2:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2510 00000F19 253031366C78202025-
  2510 00000F22 3031366C78207C2025-
  2510 00000F2B 3031366C7820202530-
  2510 00000F34 31366C78207C207C0A-
  2510 00000F3D 00                 
  2511 00000F3E 796D6D313A20207C20-     showymmsubprogram.aveymm1         db "ymm1:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2511 00000F47 253031366C78202025-
  2511 00000F50 3031366C78207C2025-
  2511 00000F59 3031366C7820202530-
  2511 00000F62 31366C78207C207C0A-
  2511 00000F6B 00                 
  2512 00000F6C 796D6D303A20207C20-     showymmsubprogram.aveymm0         db "ymm0:  | %016lx  %016lx | %016lx  %016lx | |", 10, 0
  2512 00000F75 253031366C78202025-
  2512 00000F7E 3031366C78207C2025-
  2512 00000F87 3031366C7820202530-
  2512 00000F90 31366C78207C207C0A-
  2512 00000F99 00                 
  2513 00000F9A 202020202020207C2D-     showymmsubprogram.avefooter       db "       |-------------------------------------------------------------------------|-|", 10, 0
  2513 00000FA3 2D2D2D2D2D2D2D2D2D-
  2513 00000FAC 2D2D2D2D2D2D2D2D2D-
  2513 00000FB5 2D2D2D2D2D2D2D2D2D-
  2513 00000FBE 2D2D2D2D2D2D2D2D2D-
  2513 00000FC7 2D2D2D2D2D2D2D2D2D-
  2513 00000FD0 2D2D2D2D2D2D2D2D2D-
  2513 00000FD9 2D2D2D2D2D2D2D2D2D-
  2513 00000FE2 2D2D2D2D2D2D2D2D2D-
  2513 00000FEB 7C2D7C0A00         
  2514                                  
  2515 00000FF0 257300                  xsavenotsupported.stringformat db "%s", 0
  2516 00000FF3 546865207873617665-     xsavenotsupported.notsupportedmessage db "The xsave instruction is not suported in this microprocessor.", 10, 0
  2516 00000FFC 20696E737472756374-
  2516 00001005 696F6E206973206E6F-
  2516 0000100E 74207375706F727465-
  2516 00001017 6420696E2074686973-
  2516 00001020 206D6963726F70726F-
  2516 00001029 636573736F722E0A00 
  2517                                  
  2518                                  segment .bss
  2519                                  
  2520                                  align 64                                                    ;The next data below must begin on a 64-byte boundary
  2521 00000340 <res 00000340>          showymmsubprogram.backuparea resb 832                       ;Create 832 bytes of storage for the data from state components 0 though 2.
  2522                                  
  2523                                  segment .text
  2524                                  
  2525                                  showymmsubprogram:
  2526                                  
  2527                                  ;=========== Back up all the GPRs whether used in this program or not ======================================================================================================
  2528                                  
  2529 00000FF7 55                      push       rbp                                              ;Save a copy of the stack base pointer
  2530 00000FF8 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
  2531 00000FFB 53                      push       rbx                                              ;Back up rbx
  2532 00000FFC 51                      push       rcx                                              ;Back up rcx
  2533 00000FFD 52                      push       rdx                                              ;Back up rdx
  2534 00000FFE 56                      push       rsi                                              ;Back up rsi
  2535 00000FFF 57                      push       rdi                                              ;Back up rdi
  2536 00001000 4150                    push       r8                                               ;Back up r8
  2537 00001002 4151                    push       r9                                               ;Back up r9
  2538 00001004 4152                    push       r10                                              ;Back up r10
  2539 00001006 4153                    push       r11                                              ;Back up r11
  2540 00001008 4154                    push       r12                                              ;Back up r12
  2541 0000100A 4155                    push       r13                                              ;Back up r13
  2542 0000100C 4156                    push       r14                                              ;Back up r14
  2543 0000100E 4157                    push       r15                                              ;Back up r15
  2544 00001010 9C                      pushf                                                       ;Back up rflags
  2545                                  
  2546                                  
  2547                                  ;===========================================================================================================================================================================
  2548                                  ;===== Begin State Component Backup ========================================================================================================================================
  2549                                  ;===========================================================================================================================================================================
  2550                                  
  2551                                  ;=========== Before proceeding verify that this computer supports xsave and xrstor =========================================================================================
  2552                                  ;Bit #26 of rcx, written rcx[26], must be 1; otherwise xsave and xrstor are not supported by this computer.
  2553                                  ;Preconditions: rax holds 1.
  2554 00001011 B801000000              mov        rax, 1
  2555                                  
  2556                                  ;Execute the cpuid instruction
  2557 00001016 0FA2                    cpuid
  2558                                  
  2559                                  ;Postconditions: If rcx[26]==1 then xsave is supported.  If rcx[26]==0 then xsave is not supported.
  2560                                  
  2561                                  ;=========== Extract bit #26 and test it ===================================================================================================================================
  2562                                  
  2563 00001018 4881E100000004          and        rcx, 0x0000000004000000                          ;The mask 0x0000000004000000 has a 1 in position #26.  Now rcx is either all zeros or
  2564                                                                                              ;has a single 1 in position #26 and zeros everywhere else.
  2565 0000101F 4883F900                cmp        rcx, 0                                           ;Is (rcx == 0)?
  2566 00001023 742A                    je         xsavenotsupported                                ;Skip the section that backs up state component data.
  2567                                  
  2568                                  ;========== Call the function to obtain the bitmap of state components =====================================================================================================
  2569                                  
  2570                                  ;Preconditions
  2571 00001025 B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  2572 0000102A B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  2573                                  
  2574                                  ;Call the function
  2575 0000102F 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  2576                                  
  2577                                  ;Postconditions (There are 2 of these):
  2578                                  
  2579                                  ;1.  edx:eax is a bit map of state components managed by xsave.  At the time this program was written (2014 June) there were exactly 3 state components.  Therefore, bits
  2580                                  ;    numbered 2, 1, and 0 are important for current cpu technology.
  2581                                  ;2.  ecx holds the number of bytes required to store all the data of enabled state components. [Post condition 2 is not used in this program.]
  2582                                  ;This program assumes that under current technology (year 2014) there are at most three state components having a maximum combined data storage requirement of 832 bytes.
  2583                                  ;Therefore, the value in ecx will be less than or equal to 832.
  2584                                  
  2585                                  ;Precaution: As an insurance against a future time when there will be more than 3 state components in a processor of the X86 family the state component bitmap is masked to
  2586                                  ;allow only 3 state components maximum.
  2587                                  
  2588 00001031 41BF07000000            mov        r15, 7                                           ;7 equals three 1 bits.
  2589 00001037 4C21F8                  and        rax, r15                                         ;Bits 63-3 become zeros.
  2590 0000103A 41BF00000000            mov        r15, 0                                           ;0 equals 64 binary zeros.
  2591 00001040 4C21FA                  and        rdx, r15                                         ;Zero out rdx.
  2592                                  
  2593                                  ;========== Save all the data of all three components except GPRs ==========================================================================================================
  2594                                  
  2595                                  ;The instruction xsave will save those state components with on bits in the bitmap.  At this point edx:eax continues to hold the state component bitmap.
  2596                                  
  2597                                  ;Precondition: edx:eax holds the state component bit map.  This condition has been met by the two pops preceding this statement.
  2598 00001043 0FAE2425[40030000]      xsave      [.backuparea]                                    ;All the data of state components managed by xsave have been written to backuparea.
  2599                                  
  2600 0000104B 6AFF                    push qword -1                                               ;Set a flag (-1 = true) to indicate that state component data were backed up.
  2601 0000104D EB20                    jmp        startapplication
  2602                                  
  2603                                  ;========== Show message xsave is not supported on this platform ===========================================================================================================
  2604                                  xsavenotsupported:
  2605                                  
  2606 0000104F B800000000              mov        rax, 0
  2607 00001054 48BF-                   mov        rdi, .stringformat
  2607 00001056 [F00F000000000000] 
  2608 0000105E 48BE-                   mov        rsi, .notsupportedmessage                        ;"The xsave instruction is not suported in this microprocessor.
  2608 00001060 [F30F000000000000] 
  2609 00001068 E8(00000000)            call       printf
  2610                                  
  2611 0000106D 6A00                    push qword 0                                                ;Set a flag (0 = false) to indicate that state component data were not backed up.
  2612                                  
  2613                                  ;===========================================================================================================================================================================
  2614                                  ;===== End of State Component Backup =======================================================================================================================================
  2615                                  ;===========================================================================================================================================================================
  2616                                  
  2617                                  ;===== State of the integer stack at this time ============================================================================================================================
  2618                                  
  2619                                  ;              |---------------------------|
  2620                                  ;     rsp+18*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
  2621                                  ;              |---------------------------|
  2622                                  ;     rsp+17*8 | arbitrary number from user|
  2623                                  ;              |---------------------------|
  2624                                  ;     rsp+16*8 | return address            |
  2625                                  ;              |---------------------------|
  2626                                  ;     rsp+15*8 | rbp                       |
  2627                                  ;              |---------------------------|
  2628                                  ;     rsp+14*8 | rbx                       |
  2629                                  ;              |---------------------------|
  2630                                  ;     rsp+13*8 | rcx                       |
  2631                                  ;              |---------------------------|
  2632                                  ;     rsp+12*8 | rdx                       |
  2633                                  ;              |---------------------------|
  2634                                  ;     rsp+11*8 | rsi                       |
  2635                                  ;              |---------------------------|
  2636                                  ;     rsp+10*8 | rdi                       |
  2637                                  ;              |---------------------------|
  2638                                  ;     rsp+9*8  | r8                        |
  2639                                  ;              |---------------------------|
  2640                                  ;     rsp+8*8  | r9                        |
  2641                                  ;              |---------------------------|
  2642                                  ;     rsp+7*8  | r10                       |
  2643                                  ;              |---------------------------|
  2644                                  ;     rsp+6*8  | r11                       |
  2645                                  ;              |---------------------------|
  2646                                  ;     rsp+5*8  | r12                       |
  2647                                  ;              |---------------------------|
  2648                                  ;     rsp+4*8  | r13                       |
  2649                                  ;              |---------------------------|
  2650                                  ;     rsp+3*8  | r14                       |
  2651                                  ;              |---------------------------|
  2652                                  ;     rsp+2*8  | r15                       |
  2653                                  ;              |---------------------------|
  2654                                  ;     rsp+1*8  | rflags                    |
  2655                                  ;              |---------------------------|
  2656                                  ;     rsp      | flag either -1 or 0       |
  2657                                  ;              |---------------------------|
  2658                                  
  2659                                  ;===========================================================================================================================================================================
  2660                                  startapplication: ;===== Begin the application here: Show contents of ymm registers ========================================================================================
  2661                                  ;===========================================================================================================================================================================
  2662                                  
  2663                                  ;========== Copy all ymm data to the system stack ==========================================================================================================================
  2664                                  
  2665 0000106F 4881EC00020000          sub        rsp, 512                                         ;Create storage with the exact size needed to store the data of all ymm registers.
  2666                                  
  2667 00001076 C57D11BC24E0010000      vmovupd    [rsp+15*32], ymm15                               ;16 tedious copy instructions
  2668 0000107F C57D11B424C0010000      vmovupd    [rsp+14*32], ymm14                               ;ditto
  2669 00001088 C57D11AC24A0010000      vmovupd    [rsp+13*32], ymm13                               ;ditto
  2670 00001091 C57D11A42480010000      vmovupd    [rsp+12*32], ymm12                               ;ditto
  2671 0000109A C57D119C2460010000      vmovupd    [rsp+11*32], ymm11                               ;ditto
  2672 000010A3 C57D11942440010000      vmovupd    [rsp+10*32], ymm10                               ;ditto
  2673 000010AC C57D118C2420010000      vmovupd    [rsp+9*32], ymm9                                 ;ditto
  2674 000010B5 C57D11842400010000      vmovupd    [rsp+8*32], ymm8                                 ;ditto
  2675 000010BE C5FD11BC24E0000000      vmovupd    [rsp+7*32], ymm7                                 ;ditto
  2676 000010C7 C5FD11B424C0000000      vmovupd    [rsp+6*32], ymm6                                 ;ditto
  2677 000010D0 C5FD11AC24A0000000      vmovupd    [rsp+5*32], ymm5                                 ;ditto
  2678 000010D9 C5FD11A42480000000      vmovupd    [rsp+4*32], ymm4                                 ;ditto
  2679 000010E2 C5FD115C2460            vmovupd    [rsp+3*32], ymm3                                 ;ditto
  2680 000010E8 C5FD11542440            vmovupd    [rsp+2*32], ymm2                                 ;ditto
  2681 000010EE C5FD114C2420            vmovupd    [rsp+1*32], ymm1                                 ;ditto
  2682 000010F4 C5FD110424              vmovupd    [rsp+0*32], ymm0                                 ;ditto
  2683                                  
  2684                                  ;========== End of copying ymm values to the integer stack =================================================================================================================
  2685                                  
  2686                                  ;===== State of the integer stack at this time ============================================================================================================================
  2687                                  
  2688                                  ;               |---------------------------|
  2689                                  ;  rsp+512+18*8 | unknown                   | <== top of stack at the instant before calling showregisters, which is rsp+19*8 = rsp+152
  2690                                  ;               |---------------------------|
  2691                                  ;  rsp+512+17*8 | arbitrary number from user|
  2692                                  ;               |---------------------------|
  2693                                  ;  rsp+512+16*8 | return address            |
  2694                                  ;               |---------------------------|
  2695                                  ;  rsp+512+15*8 | rbp                       |
  2696                                  ;               |---------------------------|
  2697                                  ;  rsp+512+14*8 | rbx                       |
  2698                                  ;               |---------------------------|
  2699                                  ;  rsp+512+13*8 | rcx                       |
  2700                                  ;               |---------------------------|
  2701                                  ;  rsp+512+12*8 | rdx                       |
  2702                                  ;               |---------------------------|
  2703                                  ;  rsp+512+11*8 | rsi                       |
  2704                                  ;               |---------------------------|
  2705                                  ;  rsp+512+10*8 | rdi                       |
  2706                                  ;               |---------------------------|
  2707                                  ;  rsp+512+9*8  | r8                        |
  2708                                  ;               |---------------------------|
  2709                                  ;  rsp+512+8*8  | r9                        |
  2710                                  ;               |---------------------------|
  2711                                  ;  rsp+512+7*8  | r10                       |
  2712                                  ;               |---------------------------|
  2713                                  ;  rsp+512+6*8  | r11                       |
  2714                                  ;               |---------------------------|
  2715                                  ;  rsp+512+5*8  | r12                       |
  2716                                  ;               |---------------------------|
  2717                                  ;  rsp+512+4*8  | r13                       |
  2718                                  ;               |---------------------------|
  2719                                  ;  rsp+512+3*8  | r14                       |
  2720                                  ;               |---------------------------|
  2721                                  ;  rsp+512+2*8  | r15                       |
  2722                                  ;               |---------------------------|
  2723                                  ;  rsp+512+1*8  | rflags                    |
  2724                                  ;               |---------------------------|
  2725                                  ;  rsp+512      | flag either -1 or 0       |
  2726                                  ;               |---------------------------|
  2727                                  ;               |                           |
  2728                                  ;               |                           |
  2729                                  ;               |                           |
  2730                                  ;               |      512 bytes for        |
  2731                                  ;               |      ymm registers        |
  2732                                  ;               |                           |
  2733                                  ;               |                           |
  2734                                  ;               |                           |
  2735                                  ;  rsp          |---------------------------|
  2736                                  
  2737                                  ;========== Begin section that will display all the ymm values =============================================================================================================
  2738 000010F9 90<rept>                align 16
  2739 00001100 B800000000              mov qword  rax, 0
  2740 00001105 48BF-                   mov        rdi, showymmsubprogram.aveheaderfirst
  2740 00001107 [520B000000000000] 
  2741 0000110F 488BB42488020000        mov        rsi, [rsp+512+17*8]                            ;rsp+512+17*8 is the location of the ID integer used by the programmer when calling showymmregisters
  2742 00001117 E8(00000000)            call       printf
  2743                                  
  2744 0000111C B800000000              mov qword  rax, 0
  2745 00001121 48BF-                   mov        rdi, showymmsubprogram.aveheadersecond
  2745 00001123 [620B000000000000] 
  2746 0000112B E8(00000000)            call       printf
  2747                                  
  2748 00001130 B800000000              mov qword  rax, 0
  2749 00001135 48BF-                   mov        rdi, showymmsubprogram.aveheaderthird
  2749 00001137 [B80B000000000000] 
  2750 0000113F E8(00000000)            call       printf
  2751                                  
  2752 00001144 B800000000              mov qword  rax, 0
  2753 00001149 48BF-                   mov        rdi, showymmsubprogram.aveheaderfourth
  2753 0000114B [0E0C000000000000] 
  2754 00001153 E8(00000000)            call       printf
  2755                                  
  2756 00001158 B800000000              mov qword  rax, 0
  2757 0000115D 48BF-                   mov        rdi, showymmsubprogram.aveheaderfifth
  2757 0000115F [640C000000000000] 
  2758 00001167 E8(00000000)            call       printf
  2759                                  
  2760 0000116C B800000000              mov qword  rax, 0
  2761 00001171 48BF-                   mov        rdi, showymmsubprogram.aveymm15
  2761 00001173 [BA0C000000000000] 
  2762 0000117B 488BB424F8010000        mov        rsi, [rsp+63*8]
  2763 00001183 488B9424F0010000        mov        rdx, [rsp+62*8]
  2764 0000118B 488B8C24E8010000        mov        rcx, [rsp+61*8]
  2765 00001193 4C8B8424E0010000        mov        r8,  [rsp+60*8]
  2766 0000119B E8(00000000)            call       printf
  2767                                  
  2768 000011A0 B800000000              mov qword  rax, 0
  2769 000011A5 48BF-                   mov        rdi, showymmsubprogram.aveymm14
  2769 000011A7 [E80C000000000000] 
  2770 000011AF 488BB424D8010000        mov        rsi, [rsp+59*8]
  2771 000011B7 488B9424D0010000        mov        rdx, [rsp+58*8]
  2772 000011BF 488B8C24C8010000        mov        rcx, [rsp+57*8]
  2773 000011C7 4C8B8424C0010000        mov        r8,  [rsp+56*8]
  2774 000011CF E8(00000000)            call       printf
  2775                                  
  2776 000011D4 B800000000              mov qword  rax, 0
  2777 000011D9 48BF-                   mov        rdi, showymmsubprogram.aveymm13
  2777 000011DB [160D000000000000] 
  2778 000011E3 488BB424B8010000        mov        rsi, [rsp+55*8]
  2779 000011EB 488B9424B0010000        mov        rdx, [rsp+54*8]
  2780 000011F3 488B8C24A8010000        mov        rcx, [rsp+53*8]
  2781 000011FB 4C8B8424A0010000        mov        r8,  [rsp+52*8]
  2782 00001203 E8(00000000)            call       printf
  2783                                  
  2784 00001208 B800000000              mov qword  rax, 0
  2785 0000120D 48BF-                   mov        rdi, showymmsubprogram.aveymm12
  2785 0000120F [440D000000000000] 
  2786 00001217 488BB42498010000        mov        rsi, [rsp+51*8]
  2787 0000121F 488B942490010000        mov        rdx, [rsp+50*8]
  2788 00001227 488B8C2488010000        mov        rcx, [rsp+49*8]
  2789 0000122F 4C8B842480010000        mov        r8,  [rsp+48*8]
  2790 00001237 E8(00000000)            call       printf
  2791                                  
  2792 0000123C B800000000              mov qword  rax, 0
  2793 00001241 48BF-                   mov        rdi, showymmsubprogram.aveymm11
  2793 00001243 [720D000000000000] 
  2794 0000124B 488BB42478010000        mov        rsi, [rsp+47*8]
  2795 00001253 488B942470010000        mov        rdx, [rsp+46*8]
  2796 0000125B 488B8C2468010000        mov        rcx, [rsp+45*8]
  2797 00001263 4C8B842460010000        mov        r8,  [rsp+44*8]
  2798 0000126B E8(00000000)            call       printf
  2799                                  
  2800 00001270 B800000000              mov qword  rax, 0
  2801 00001275 48BF-                   mov        rdi, showymmsubprogram.aveymm10
  2801 00001277 [A00D000000000000] 
  2802 0000127F 488BB42458010000        mov        rsi, [rsp+43*8]
  2803 00001287 488B942450010000        mov        rdx, [rsp+42*8]
  2804 0000128F 488B8C2448010000        mov        rcx, [rsp+41*8]
  2805 00001297 4C8B842440010000        mov        r8,  [rsp+40*8]
  2806 0000129F E8(00000000)            call       printf
  2807                                  
  2808 000012A4 B800000000              mov qword  rax, 0
  2809 000012A9 48BF-                   mov        rdi, showymmsubprogram.aveymm9
  2809 000012AB [CE0D000000000000] 
  2810 000012B3 488BB42438010000        mov        rsi, [rsp+39*8]
  2811 000012BB 488B942430010000        mov        rdx, [rsp+38*8]
  2812 000012C3 488B8C2428010000        mov        rcx, [rsp+37*8]
  2813 000012CB 4C8B842420010000        mov        r8,  [rsp+36*8]
  2814 000012D3 E8(00000000)            call       printf
  2815                                  
  2816 000012D8 B800000000              mov qword  rax, 0
  2817 000012DD 48BF-                   mov        rdi, showymmsubprogram.aveymm8
  2817 000012DF [FC0D000000000000] 
  2818 000012E7 488BB42418010000        mov        rsi, [rsp+35*8]
  2819 000012EF 488B942410010000        mov        rdx, [rsp+34*8]
  2820 000012F7 488B8C2408010000        mov        rcx, [rsp+33*8]
  2821 000012FF 4C8B842400010000        mov        r8,  [rsp+32*8]
  2822 00001307 E8(00000000)            call       printf
  2823                                  
  2824 0000130C B800000000              mov qword  rax, 0
  2825 00001311 48BF-                   mov        rdi, showymmsubprogram.aveymm7
  2825 00001313 [2A0E000000000000] 
  2826 0000131B 488BB424F8000000        mov        rsi, [rsp+31*8]
  2827 00001323 488B9424F0000000        mov        rdx, [rsp+30*8]
  2828 0000132B 488B8C24E8000000        mov        rcx, [rsp+29*8]
  2829 00001333 4C8B8424E0000000        mov        r8,  [rsp+28*8]
  2830 0000133B E8(00000000)            call       printf
  2831                                  
  2832 00001340 B800000000              mov qword  rax, 0
  2833 00001345 48BF-                   mov        rdi, showymmsubprogram.aveymm6
  2833 00001347 [580E000000000000] 
  2834 0000134F 488BB424D8000000        mov        rsi, [rsp+27*8]
  2835 00001357 488B9424D0000000        mov        rdx, [rsp+26*8]
  2836 0000135F 488B8C24C8000000        mov        rcx, [rsp+25*8]
  2837 00001367 4C8B8424C0000000        mov        r8,  [rsp+24*8]
  2838 0000136F E8(00000000)            call       printf
  2839                                  
  2840 00001374 B800000000              mov qword  rax, 0
  2841 00001379 48BF-                   mov        rdi, showymmsubprogram.aveymm5
  2841 0000137B [860E000000000000] 
  2842 00001383 488BB424B8000000        mov        rsi, [rsp+23*8]
  2843 0000138B 488B9424B0000000        mov        rdx, [rsp+22*8]
  2844 00001393 488B8C24A8000000        mov        rcx, [rsp+21*8]
  2845 0000139B 4C8B8424A0000000        mov        r8,  [rsp+20*8]
  2846 000013A3 E8(00000000)            call       printf
  2847                                  
  2848 000013A8 B800000000              mov qword  rax, 0
  2849 000013AD 48BF-                   mov        rdi, showymmsubprogram.aveymm4
  2849 000013AF [B40E000000000000] 
  2850 000013B7 488BB42498000000        mov        rsi, [rsp+19*8]
  2851 000013BF 488B942490000000        mov        rdx, [rsp+18*8]
  2852 000013C7 488B8C2488000000        mov        rcx, [rsp+17*8]
  2853 000013CF 4C8B842480000000        mov        r8,  [rsp+16*8]
  2854 000013D7 E8(00000000)            call       printf
  2855                                  
  2856 000013DC B800000000              mov qword  rax, 0
  2857 000013E1 48BF-                   mov        rdi, showymmsubprogram.aveymm3
  2857 000013E3 [E20E000000000000] 
  2858 000013EB 488B742478              mov        rsi, [rsp+15*8]
  2859 000013F0 488B542470              mov        rdx, [rsp+14*8]
  2860 000013F5 488B4C2468              mov        rcx, [rsp+13*8]
  2861 000013FA 4C8B442460              mov        r8,  [rsp+12*8]
  2862 000013FF E8(00000000)            call       printf
  2863                                  
  2864 00001404 B800000000              mov qword  rax, 0
  2865 00001409 48BF-                   mov        rdi, showymmsubprogram.aveymm2
  2865 0000140B [100F000000000000] 
  2866 00001413 488B742458              mov        rsi, [rsp+11*8]
  2867 00001418 488B542450              mov        rdx, [rsp+10*8]
  2868 0000141D 488B4C2448              mov        rcx, [rsp+9*8]
  2869 00001422 4C8B442440              mov        r8,  [rsp+8*8]
  2870 00001427 E8(00000000)            call       printf
  2871                                  
  2872 0000142C B800000000              mov qword  rax, 0
  2873 00001431 48BF-                   mov        rdi, showymmsubprogram.aveymm1
  2873 00001433 [3E0F000000000000] 
  2874 0000143B 488B742438              mov        rsi, [rsp+7*8]
  2875 00001440 488B542430              mov        rdx, [rsp+6*8]
  2876 00001445 488B4C2428              mov        rcx, [rsp+5*8]
  2877 0000144A 4C8B442420              mov        r8,  [rsp+4*8]
  2878 0000144F E8(00000000)            call       printf
  2879                                  
  2880 00001454 B800000000              mov qword  rax, 0
  2881 00001459 48BF-                   mov        rdi, showymmsubprogram.aveymm0
  2881 0000145B [6C0F000000000000] 
  2882 00001463 488B742418              mov        rsi, [rsp+3*8]
  2883 00001468 488B542410              mov        rdx, [rsp+2*8]
  2884 0000146D 488B4C2408              mov        rcx, [rsp+1*8]
  2885 00001472 4C8B0424                mov        r8,  [rsp+0*8]
  2886 00001476 E8(00000000)            call       printf
  2887                                  
  2888 0000147B B800000000              mov qword  rax, 0
  2889 00001480 48BF-                   mov        rdi, showymmsubprogram.avefooter
  2889 00001482 [9A0F000000000000] 
  2890 0000148A E8(00000000)            call       printf
  2891                                  
  2892                                  ;========== End section that will display all the ymm values ===============================================================================================================
  2893                                  
  2894                                  ;========== Reverse the pushes that occurred in this subprogram ============================================================================================================
  2895                                  
  2896                                  ;Earlier in this program, showymmsubprogram, the instruction "sub rsp, 832" created 832 bytes of storage.  Now it is time to free that space
  2897                                  
  2898 0000148F 4881C400020000          add rsp, 512                                                ;Free previously allocated space
  2899                                  
  2900                                  ;The stack in now in the same state it was in when execution of the application started.
  2901                                  
  2902                                  ;===========================================================================================================================================================================
  2903                                  ;===== End of the application: Show contents of AVX registers ==============================================================================================================
  2904                                  ;===========================================================================================================================================================================
  2905                                  
  2906                                  
  2907                                  ;===========================================================================================================================================================================
  2908                                  ;===== Begin State Component Restoration ==================================================================================================================================
  2909                                  ;===========================================================================================================================================================================
  2910                                  
  2911                                  ;===== Check the flag to determine if state components were really backed up ===============================================================================================
  2912                                  
  2913 00001496 5B                      pop        rbx                                              ;Obtain a copy of the flag that indicates state component backup or not.
  2914                                  
  2915 00001497 4883FB00                cmp        rbx, 0                                           ;If there was no backup of state components then jump past the restore section.
  2916 0000149B 7426                    je         leavestatecomponentrestoration                   ;There are not data to be restored
  2917                                  
  2918                                  ;Continue with restoration of state components;
  2919                                  
  2920                                  ;Precondition: edx:eax must hold the state component bitmap.  Therefore, go get a new copy of that bitmap.
  2921                                  
  2922                                  ;Preconditions for obtaining the bitmap from the cpuid instruction
  2923 0000149D B80D000000              mov        rax, 0x000000000000000d                          ;Place 13 in rax.  This number is provided in the Intel manual
  2924 000014A2 B900000000              mov        rcx, 0                                           ;0 is parameter for subfunction 0
  2925                                  
  2926                                  ;Call the function
  2927 000014A7 0FA2                    cpuid                                                       ;cpuid is an essential function that returns information about the cpu
  2928                                  
  2929                                  ;Postcondition: The bitmap in now in edx:eax
  2930                                  
  2931                                  ;Future insurance: Make sure the bitmap is limited to a maximum of 3 state components.
  2932 000014A9 41BF07000000            mov        r15, 7
  2933 000014AF 4C21F8                  and        rax, r15
  2934 000014B2 41BF00000000            mov        r15, 0
  2935 000014B8 4C21FA                  and        rdx, r15
  2936                                  
  2937 000014BB 0FAE2C25[40030000]      xrstor     [showymmsubprogram.backuparea]
  2938                                  
  2939                                  ;===========================================================================================================================================================================
  2940                                  ;===== End State Component Restoration ====================================================================================================================================
  2941                                  ;===========================================================================================================================================================================
  2942                                  
  2943                                  leavestatecomponentrestoration:
  2944                                  
  2945                                  ;=========== Now restore original values to GPRs ===========================================================================================================================
  2946                                  
  2947 000014C3 9D                      popf                                                        ;Restore rflags
  2948 000014C4 415F                    pop        r15                                              ;Restore r15
  2949 000014C6 415E                    pop        r14                                              ;Restore r14
  2950 000014C8 415D                    pop        r13                                              ;Restore r13
  2951 000014CA 415C                    pop        r12                                              ;Restore r12
  2952 000014CC 415B                    pop        r11                                              ;Restore r11
  2953 000014CE 415A                    pop        r10                                              ;Restore r10
  2954 000014D0 4159                    pop        r9                                               ;Restore r9
  2955 000014D2 4158                    pop        r8                                               ;Restore r8
  2956 000014D4 5F                      pop        rdi                                              ;Restore rdi
  2957 000014D5 5E                      pop        rsi                                              ;Restore rsi
  2958 000014D6 5A                      pop        rdx                                              ;Restore rdx
  2959 000014D7 59                      pop        rcx                                              ;Restore rcx
  2960 000014D8 5B                      pop        rbx                                              ;Restore rbx
  2961 000014D9 5D                      pop        rbp                                              ;Restore rbp
  2962                                  
  2963                                  ;========== Exit gently from this subprogram ===============================================================================================================================
  2964                                  
  2965 000014DA B800000000              mov qword  rax, 0                                           ;Return zero to caller marking a successful conclusion.
  2966 000014DF C20800                  ret        8                                                ;Go to the address on top of the stack, and then discard 8 from the stack.
  2967                                  
  2968                                  ;===========================================================================================================================================================================
  2969                                  ;========== End of showymmsubprogram =======================================================================================================================================
  2970                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
  2971                                  
  2972                                  
  2973                                  
  2974                                  
  2975                                  
  2976                                  
  2977                                  
  2978                                  
  2979                                  
  2980                                  
  2981                                  
  2982                                  
  2983                                  ;===========================================================================================================================================================================
  2984                                  ;========== Begin footnotes ================================================================================================================================================
  2985                                  ;===========================================================================================================================================================================
  2986                                  ;From Professional Assembly Language by Richard Blum, page 241.
  2987                                  ;The tag register is used to identify the values with the eight 80-bit FPU data registers.  The tag register uses 16 bits (2 bits per register) to identify
  2988                                  ;the contents of each FPU data registers.  See figure below.
  2989                                  ;
  2990                                  ;Bits:                   15&14 13&12 11&10 9&8 7&6 5&4 3&2 1&0
  2991                                  ;Physical registers:      R7    R6    R5   R4  R3  R2  R1  R0
  2992                                  ;
  2993                                  ;Each tag value corresponds to a physical FPU register.  The 2-bit value for each register can contain on of four special codes indicating the content of the
  2994                                  ;register.  At any given time, an FPU data register can contain any one of the following "tags":
  2995                                      ;code 00:  a valid extended value
  2996                                      ;code 01:  the value zero
  2997                                      ;code 10:  one of the special fp value: denormal, infinity, or nan
  2998                                      ;code 11:  empty [free space, probably a nan]
  2999                                  ;This enables programmers to perform a quick check of the tag register to determine whether valid data may be in an FPU register, instead of having to read 
  3000                                  ;and analyze the contents of the register, although in practice, because you are the one putting the values into the register stack, you should already know 
  3001                                  ;what is there.
  3002                                  ;===========================================================================================================================================================================
  3003                                  
